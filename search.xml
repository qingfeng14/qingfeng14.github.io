<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>%2F2017%2F04%2F13%2Fcategories%2F</url>
      <content type="text"><![CDATA[第一节 广告设计与制作行业概况 一、广告设计与制作行业的发展历史 我国广告行业发展分析 广告行业研究报告 二、广告设计与制作行业产品链及产业链构成 广告行业研究报告 网络广告行业日新月异,广告产业链日趋完善 RTB网络广告产业链价值分配研究 新媒体环境下广告产业链的构建思考 改写广告业的“实时”与“竞价”——实时竞价(RTB)广告的产业链流程和运行机制研究 电视广告行业与上下游的关联性分析 二、广告设计与制作行业发展历程及当前发展阶段 广告行业研究报告 新媒体环境下广告产业链的构建思考 中国广告行业发展现状与趋势 【重要】中国广告行业发展现状及未来发展趋势探讨 三、广告设计与制作行业近年发展现状 新媒体环境下广告产业链的构建思考 中国广告行业发展现状与趋势 【重要】中国广告行业发展现状及未来发展趋势探讨 广告危机源于商业文化缺失 四、广告设计与制作行业技术发展水平 中国广告行业发展现状与趋势 五、广告设计与制作行业经营模式 改写广告业的“实时”与“竞价”——实时竞价(RTB)广告的产业链流程和运行机制研究 RTB网络广告产业链价值分配研究 【重要】中国广告行业发展现状及未来发展趋势探讨 第二节 广告设计与制作行业相关政策与监管机制 一、产业政策及行业规范 中国广告监管制度的研究综述 广告行业研究报告 二、行业监管体制 中国广告监管制度的研究综述 广告行业研究报告 第三节 广告设计与制作行业利润水平变化 一、广告设计与制作行业利润变化统计 我国广告行业发展分析 大数据时代中国广告产业的发展研究 2016年中国广告行业发展概况及发展趋势分析 中国广告行业报告 二、引起广告设计与制作行业利润变化的原因 大数据时代中国广告产业的发展研究 广告危机源于商业文化缺失 中国广告行业报告 第四节 影响广告设计与制作行业发展的主要因素 广告行业研究报告 广告危机源于商业文化缺失]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Search_Results]]></title>
      <url>%2F2017%2F04%2F13%2FSearch-Results%2F</url>
      <content type="text"><![CDATA[说明【重要，必看】 论文引用一定要注明出处，一般分文中引用和文末引用，具体请参考APA相关规范 本文档记录的格式为： 文献标题，参考引用格式，文章内容概要 【文献】我国广告行业发展分析【注意：根据文章的声明，引用需注明出处为国盛证券有限责任公司】 内容简介 【摘要】 中国广告行业发展分析 文章目录 （一）行业主管部门、监管体制及产业政策 1、行业主管部门 、监管体制 2、行业自律、社会监督 3、主要产业政策 4、主要法规 （二）行业发展概况 1、广告行业概述 2、行业发展现状 （三）广告行业发展趋势 （四）广告企业上下游情况 （五）行业进入壁垒 （六）行业发展的有利因素和不利因素 【文献】 中国广告监管制度的研究综述 引用格式APA 1廖秉宜. 中国广告监管制度的研究综述[J]. 广告大观(理论版),2016,03:25-33. 内容简介 【摘要】 广告监管制度的完善,可以规范广告市场行为,服务国家社会管理创新战略,促进广告市场与经济社会和谐发展。如何完善我国广告监管制度,促进广告业健康发展,一直是广告学术界研究的重要课题。作者对近年来中国广告监管制度研究的重要成果做了系统梳理,并总结出广告监管制度研究的五大关注点,以期梳理清楚目前这一议题的研究现状和存在的问题 文章目录 关于广告监管体制的研究 关于虚假广告治理机制的研究 关于广告法律法规的研究 关于广告自律与广告伦理的研究 关于广告市场活动监管的研究 当前中国广告监管制度研究存在的问题 【文献】 大数据时代中国广告产业的发展研究 引用格式APA 1廖秉宜. (2015). 大数据时代中国广告产业的发展研究. 广告大观:理论版(6). 内容简介 大数据时代,中国广告产业面临新的挑战和机遇,广告产业界能否适应大数据时代的新要求,及时转型升级,提升市场竞争力,将直接决定中国广告产业未来发展的格局和走向。本文重点分析了大数据时代中国广告产业变革现状以及面临的问题,由此提出了中国广告产业创新发展的具体策略,即加速推进传统广告产业转型升级,建构与优化数字广告产业新生态,提升数字广告公司的核心竞争力,完善广告行业外资并购法律法规。 文章目录 大数据时代中国广告产业的变革现状 大数据时代中国广告产业的问题审视 （一）大数据时代中国传统广告产业转型的困境 （二）大数据时代中国数字广告产业生态的问题 （三）大数据时代中国广告公司竞争力亟待提升 大数据时代中国广告产业的发展对策 【文献】广告行业研究报告 文章目录 广告行业概况 广告行业概述 广告行业监管体系 广告行业主要法律法规及政策 广告行业发展历程及市场规模 全球广告发展历程 中国广告发展历程 广告行业市场规模 广告行业产业链概述 我国广告行业竞争状况 影响广告发展的有利因素 广告行业发展趋势 【文献】“互联网+”下的广告产业发展研究 引用格式APA 1金俊佶, &amp; 田智恒. (2017). “互联网+”下的广告产业发展研究. 新闻研究导刊(1), 259-261. 内容简介 摘 要：目的:研究’互联网+’战略下广告行业在发展中面临的机遇与挑战。方法:从互联网传播模式分析入手,认识’互联网+’战略的实质,由此对广告产业各部分在当今时代的角色重构和广告产业各部分的相互作用关系变化作出分析。结论:在’互联网+’环境下,广告产业应改变传统模式,加强以受众为中心的顶层设计,从技术驱动、媒体融合、受众聚合、自有媒体群平台运作等方面进行行业的升级转化。国家也应出台配套的法律法规,同时广告主、广告媒体和广告公司也应加强自律、规范操作,保证’互联网+’环境下广告产业的创新与良性发展。 文章目录 广告产业 互联网+下传播得变化与行业发展概念 广告产业各部分的角色重构 【文献】网络广告行业日新月异,广告产业链日趋完善 引用格式APA 1阮京文. (2013). 网络广告行业日新月异,广告产业链日趋完善. 广告大观:综合版(4). 内容简介 摘 要：2012年注定是非同寻常的一年,互联网人口红利逐渐消减,部分行业的泡沫开始破裂,资本市场悄然收缩,大部分企业都更加看重运营效率,以降低成本、提高利润。从广告行业来看,网络广告依然是引领行业发展的核心力量。2012年中国互联网广告 文章目录 RTB产业链 【文献】RTB网络广告产业链价值分配研究 引用格式APA 1唐艳芳. (2016). RTB网络广告产业链价值分配研究. 商(18), 207-207. 内容简介 摘要：随着互联网的快速发展,网络广告也实现了跳跃式的发展,在RTB模式下新型网络广告产业链中各个节点企业间的利益分配问题日益突出,节点企业信任度降低,交易成本增加等问题日益凸显,本文的研究以期能使RTB网络广告产业链价值分配更加合理,为该行业产业链价值分配提供有效的决策建议。 文章目录 理论背景 RBT网络广告产业链分析 模型分析 结论与建设 【文献】改写广告业的“实时”与“竞价”——实时竞价(RTB)广告的产业链流程和运行机制研究 引用格式APA 1鞠宏磊, &amp; 王宇婷. (2015). 改写广告业的“实时”与“竞价”——实时竞价(rtb)广告的产业链流程和运行机制研究. 编辑之友(4), 57-60. 内容简介 目前,实时竞价(RTB)广告已成为数字广告业发展最迅猛的领域。“实时”意味着以技术改变广告业的生产方式,而“竞价”则完成了广告资源的市场化配置。文章在对实时竞价广告的产业流程以及运行机制进行分析的基础上,探究RTB广告是如何通过不同市场主体、技术及运行机制的安排实现“实时”与“竞价”,从而改变广告业的传统运行方式与商业逻辑的。 文章目录 实时与竞价引入广告业 实时竞价广告的产业链主题 如何实现实时与竞价 【文献】新媒体环境下广告产业链的构建思考 引用格式APA 1陈瑛, &amp; 肖剑波. (2011). 新媒体环境下广告产业链的构建思考. 科技资讯(35), 227-227. 内容简介 摘要：在高新技术的催生下,各种新兴媒介不断涌现。在此背景下,受众的需求和使用习惯不断改变,媒体的经营方式、内容生产方式与用户服务模式也在发生着深刻变化,广告产业又将面临新一轮的调整。本文主要对广告产业的发展现状、面临的问题、对策措施和发展走向进行了分析,在广告产业链的构建方面提出一些建议。 关键词：广告环境; 广告产业链; 新媒体; 构建; 文章目录 1 新媒体及广告产业的相关理论依据 2 新媒体环境下广告产业所遭遇的瓶颈 3 新媒体环境下广告产业链的构建思考 广告产业的创新 未来广告产业链的发展趋势 电视广告行业与上下游的关联性分析【中国产业信息网】 点击访问 http://www.chyxx.com/industry/201501/301993.html 文章目录 广告行业产业链简介 电视媒体广告公司与上下游的关联性 【文献】中国广告行业发展现状与趋势 引用格式APA 1李桂芬. (2012). 中国广告行业发展现状与趋势. 广告大观:综合版(8), 22-23. 内容简介 摘要：主报告2012中国广告行业发展现状及趋势报告广告是推动经济发展、提升品牌价值,从而提升消费者生活品质的一个非常重要的行业。中国开放30多年以来,广告行业正面临着一个“质量”转变的 文章目录 质量转变得关键十年 中国广告代理业的现状 不变的核心思维：品牌与消费者 数字科技与媒体融合 面对未来十年 【文献】中国广告行业发展现状及未来发展趋势探讨 引用格式APA 1唐睿曼. (2016). 中国广告行业发展现状及未来发展趋势探讨. 商业故事(20). 内容简介 【摘要】：过去十年,中国的广告行业获得了长足发展,实现了从量到质的飞越。即便如此,在经历了多次整合浪潮后,依然缺少世界级的综合广告集团是目前我国广告行业发展面临的挑战。广告行业的线上发展和政策支持,将是未来广告行业发展的核心驱动力。至少在未来的几年内,互联网广告企业将会高速发展。 【作者单位】： 中国人民大学; 【关键词】： 广告行业 网络广告 发展现状 未来发展趋势 文章目录 广告行业的发展现状 国际广告行业发展状况 中国广告行业发展状况 广告行业的经营模式 代理制是通行模式 客户服务型代理和媒体销售型代理 广告行业的发展趋势 互联网广告迅速增长 基于地理位置的服务 【文献】广告危机源于商业文化缺失 引用格式APA 1李开心. (2015). 广告危机源于商业文化缺失. 商业文化月刊(22). 内容简介 摘要：广告作为现代营销的一大手段,具有相当长的历史,也曾经发挥着很大的作用,但是,移动互联网时代,广告面临着深刻的市场危机、信任危机、存在危机,怎么办?这一问题的根源是什么?未来是否需要广告、什么类型的广告?一、广告危机的起源与蔓延1.改革开放初期的广告业犹如春天般的花朵一样灿烂。我国从20世纪80年代开始进入市场经济,广告业也随之萌芽和诞生了,成为市场经济的一种先进工具, 分类号：F713.8 文章目录 广告危机的起源与蔓延 改革开放的初期 广告业的问题成为社会问题的缩影 我国广告业陷入空前的困境 广告危机的深层次根源：商业文化严重缺失 广告创意的科学性，艺术性，商业性出现矛盾 广告创意缺乏，未来发展前景不妙 广告业的未来前景分析 好广告来自哪里 未来市场需要什么广告 广告的生命力有多大 【文献】中国广告行业报告【重点】 文章目录 中国广告行业市场概况……………….. 2 中国广告行业发展状况…………………… 2 中国广告行业未来发展潜力…………….. 3 广告产业链……………………………….. 4 中国广告公司市场分析……………….. 6 广告公司分类………………………………. 6 中国营销服务行业公司类型………….. 6 中国公共关系行业分析………………. 8 中国公共关系行业发展…………………. 8 中国公共关系行业竞争状况………….. 10 公共关系与广告的关系与区别……….. 11 公关行业发展较晚的原因……………… 12 中国广告与公关行业发展趋势………….. 13 转型整合营销传播的产业趋势……… 13 数字化营销成为广告发展的重要力量 14 收购兼并成为企业快速扩展的机会… 14 行业将越来越重视资本运作………… 16 总结与展望………… 【文献】2016年中国广告行业发展概况及发展趋势分析[中国产业网] 点击进入 http://www.chyxx.com/industry/201607/429365.html 文章目录 广告行业发展现状与趋势 中国广告行业的发展概况 中国广告行业的发展趋势和前景 户外广告行业发展现状 地铁媒体广告行业发展趋势]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[安卓开发记录]]></title>
      <url>%2F2017%2F04%2F12%2F%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[安卓中用户权限设置 位置：AndroidManifest.xml 在package之后， Application 之前 12345678&lt;!--用户权限--&gt;&lt;uses-permission android:name="android.permission.INTERNET" /&gt;&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;&lt;!--VPN 权限--&gt;&lt;uses-permission android:name="android.permission.BIND_VPN_SERVICE" /&gt; Android中Intent机制 作用 启动 Activity： Activity 表示应用中的一个屏幕。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。Intent 描述了要启动的 Activity，并携带了任何必要的数据。 如果您希望在 Activity 完成后收到结果，请调用 startActivityForResult()。在 Activity 的 onActivityResult() 回调中，您的 Activity 将结果作为单独的 Intent 对象接收。如需了解详细信息，请参阅 Activity 指南。 启动服务： Service 是一个不使用用户界面而在后台执行操作的组件。通过将 Intent 传递给 startService()，您可以启动服务执行一次性操作（例如，下载文件）。Intent 描述了要启动的服务，并携带了任何必要的数据。 如果服务旨在使用客户端-服务器接口，则通过将 Intent 传递给 bindService()，您可以从其他组件绑定到此服务。如需了解详细信息，请参阅服务指南。 传递广播： 广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。 Intent 结构 action – 想要实施的动作，例: ACTION_VIEW, ACTION_EDIT, ACTION_MAIN, etc. data – 具体的数据，一般由以Uri表示，例：通讯录中的某条记录，会以Uri来表示 category – 为实施的动作添加的额外信息，即Intent组件的种类信息，一个Intent对象可以有任意个category，例：CATEGORY_LAUNCHER 意味着，它应该在启动器中作为顶级应用而存在 type – 显示指定Intent的数据类型（MIME类型 - 多用途互联网邮件扩展，Multipurpose Internet Mail Extensions），例：一个组件是可以显示图片数据的而不能播放声音文件。很多情况下，data类型可在URI中找到，比如content:开头的URI，表明数据由设备上的content provider提供。但是通过设置这个属性，可以强制采用显式指定的类型而不再进行推导 MIME类型有两种：单个记录格式、多个记录格式 component – 指定Intent的目标组件的类名称。通常 Android会根据Intent 中包含的其它属性的信息，比如action、data/type、category进行查找，最终找到一个与之匹配的目标组件。但是，如果 component这个属性有指定的话，将直接使用它指定的组件，而不再执行上述查找过程。指定了这个属性以后，Intent的其它所有属性都是可选的，例如：Intent it = new Intent(Activity.Main.this, Activity2.class); startActivity(it); extras – 附加信息，例如：it.putExtras(bundle) - 使用Bundle来传递数据；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[赛事说明]]></title>
      <url>%2F2017%2F04%2F12%2F%E8%B5%9B%E4%BA%8B%E8%AF%B4%E6%98%8E%2F</url>
      <content type="text"><![CDATA[行业-专业-就业人才需求分析大赛 比赛目的： 为贯彻落实党的十八大提出的“要做好以高校毕业生为重点的青年就业工作，推动实现更高质量就业”的精神 大力培养大学生的职业发展意识和社会调查研究能力 不断提升毕业生的就业竞争力和就业质量，进一步促进我院的教学质量和就业指导服务水平的提高 赛制 初赛和决赛。 每个专业至少组建一个团队参赛，参赛团队数量不限，参赛者以4－6人组队，原则上要求专业负责人为指导老师。学院初赛采用作品评审的形式，从参赛的队伍中评选出16支队伍晋级学院总决赛。 时间安排 （一）前期工作及报名。 各专业先组建团队，利用寒假期间进行社会调研，于2017年3月15-18日期间报名，各团队先填写报名表，提交参赛人员名单及有关信息。 （二）2017年4月19日-22日，提交参赛作品。 （三）2017年4月24日-28日，进行初赛作品评审。 （四）2017年5月上旬，公布进入决赛的团队名单。 （五）2017年5月下旬，举行总决赛。 详细流程 步骤 时间跨度 内容 前期准备 工作 2017年1月12日—3月15日 在各校区悬挂宣传横幅、张贴海报进行宣传；各专业组建团队，利用寒假期间进行社会调研。 报 名 3月15-18日 在学院就业网（http://jy.gcp.edu.cn/）公告栏处下载报名表填写。填写后提交到邮箱： 2456005002@qq.com 召开工作布置会（初定） 3月中旬 每个专业参赛团队指导老师和团队成员代表参加（地点：南校区8号楼学术报告厅） 作品提交 2017年4月19-22日 各参赛队伍将作品纸质版交到广园南校区招生就业办公室： 地址：南校区8号楼224、225室 联系人：吴老师、李老师 电话：86375471（内线：815471） 电子版发送至邮箱：2456005002@qq.com 初赛（作品筛选） 2017年4月24日—4月28日 评委专家进行作品评选 公布名单 2017年5月上旬 公布进入总决赛团队名单；各团队进一步修改完善作品，拍摄团队介绍视频、制作PPT等 总决赛 2017年5月上旬 1． 团队视频展示 2． 作品展示 3． 评委老师提问，选手答辩 沟通渠道 建立第三届“行业-专业-就业（岗位）”人才需求分析大赛交流QQ群，群号：128622629，欢迎各团队队长和指导老师加入 大赛邮箱：2456005002@qq.com 作品要求 作品需包括三部分：报告概述、主报告、附件。 作品需具有真实性、实用性，引用材料要注明出处。 所有团队的作品必须具有一定的一手调研或实践资料，不能局限于已有文本资料的引用和整理，实践部分是评分的重点。 报告详细要求 报告概述【类似摘要】 与主报告内容相似，需高度精炼、概述，2000字以内。 说明： 主报告的高度浓缩 评分比例：20% 电子版和打印版都要上交 主报告 专业分析报告 专业概况 从事该专业应具备的专业素质、技能 人力资源需求情况，该专业就业前景分析 进入本专业工作的途径（可以增加面试的准备、流程、问题、注意事项等） 思考目前本专业的培养模式并提出实际可行的建议 对在校学生的建议 行业分析报告 行业起源发展和现状（可包括规模、发展速度、利润水平、主要厂商等） 国内对行业的管理性政策法规、行业促进政策等，及其对行业的影响分析（可添加实例） 分析行业人力资源（员工数、人员构成、技术人员比例等等），业务资源（政府关系、客户关系、关键人物等） 行业的发展前景和对人才需求的趋势，进入该行业的途径 从业人员学历、素质、技能要求 相关行业进行对比，分析可替代性、竞争优势、劣势等 对在校学生的建议 就业(岗位)分析 近3年（2014届-2016届）xxx专业毕业生就业概况（毕业生人数和毕业流向分析）；2 在校生专业学习诉求调查 xx专业学生对专业学习的满意度调查及意见采集 调查结果分析 意见采集分析 综合评价分析 xx专业学生对专业就业前景的心理预期和就业准备分析 对专业就业前景的心理预期 就业准备分析 就业岗位分析报告 岗位基本信息，总体性质（工作特征以及主要工作范围） 从事该岗位的工作活动和程序 岗位的工作条件（包括物理环境，以及内外软性环境） 岗位近期需求、发展趋势 在职人员素质要求，在职人员的职业发展路线图 获取岗位的途径（可以增加面试的准备、流程、问题、注意事项等） 对在校学生的建议 注意：主报告中选取一个进行分析即可 在内容中的三方面选取一个进行分析即可 主报告内容需具备实用性，对同学有启发性 主报告不必拘泥于所规定的内容，可根据自身情况发挥，也可以就其中一个部分进行重点分析论述 应有实践调研、访谈、实习见习等一手资料 评分比例：50% 电子版和打印版都要上交 附件 根据主报告所选内容的某一方面进行的分析调研。如：对“专业报告”中的“专业培养模式建议”进行具体分析 其他附件。例如：访谈记录，岗位一天工作手记、求职面试流程，相关录音、视频材料，问卷，调研单位、调研对象提供的材料。 总结 项目太过复杂，涉及【社会调研、访谈、数据分析统计、文献综述】等多个方面，耗时耗力，时间不充裕者不建议参加。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[操作系统复习笔记]]></title>
      <url>%2F2017%2F04%2F05%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[关于x86启动后执行的第一条指令及其地址 piazza 1、实模式下，地址为base+eip。第一条指令的地址是FFFFFFF0H = base(FFFF0000H) + EIP(0000FFF0H)。 2、争端出自于CS。可看看上面我高亮的normally和however部分。简单来讲就是，CS分为两部分，一部分为可见selector，另一部分为隐含base，实模式的一般情况下base = selector&lt;&lt;4，但是，机器刚启动的时候，selector=F000, base=FFFF0000！直到跳转指令以后才变成normally~ 例题：THU OS 2015 mid term 2 (启动)对于x86机器,加电后处于实模式下,并且cs寄存器的段选择子部分为0xf000, 隐藏的基址部分为0xffff0000,eip寄存器为0xfff0,则此时待执行的指令的物理地址为( 0xfffffff0) (16位实模式)执行完第一条 jmp指令后,cs寄存器的段选择子部分变为0xf000,eip变为 0xe05b,则此时待执行指令的物理地址为() 3） (进入32位保护模式)BIOS会将ucore bootloader 加载到网络地址0x7c00,且设置cs为0x0, eip为0x7c00。在boodoader中,使用 gdt加载了如下全局描述符表,然后进入32位保护模 式。此时为了正常工作。应该用 jmp将cs设置为(=3.1=),将ds/es/fs/gs/ss设置为(=3.2=) 此时若ep为0x7c6d,则实际被执行指令的物理地址为(一33二) 进程挂起相关 另一种解决方案是交换。包括把内存中某个进程的一部分或全部移到磁盘中。当内存中没有处于就绪状态的进程时，操作系统就把被阻塞的进程换出到磁盘中的”挂起队列“（suspend queue），即暂时保存从内存中”驱逐“出来的被挂器的进程队列。操作系统在此之后取出挂起队列中的另一个进程，或者接受一个新进程的请求，将其纳入内存运行。 “交换”（swapping）是一个I/O操作，因而可能使问题更恶化。但是由于磁盘I/O一般是系统中最快的I/O（相对于磁带或者打印机I/O），所以交换通常会提高性能。 阻塞-&gt;阻塞/挂起：如果没有就绪进程，则至少一个阻塞进程被换出，为另一个没有阻塞的进程让出空间。如果操作系统确定当前正在运行的进程，或者就绪进程为了维护基本的性能要求而需要更多的内存空间，那么，即使有可用的就绪态进程也可能出现这种转换。 阻塞挂起-&gt;就绪挂起：如果等待的事件发生了，则处于阻塞/挂起状态的进程可转换到就绪/挂起态。注意，这要求操作系统必须能够得到挂起进程的状态信息。 就绪/挂起-&gt;就绪：如果内存中没有就绪态进程，操作系统需要调入一个进程继续执行。此外，当处于就绪/挂起状态的进程比处于就绪态的任何进程的优先级都要高时，也可以进行这种转换。这种情况的产生是由于操作系统设计者规定，调入高优先级的进程比减少交换量更重要。 就绪-&gt;就绪/挂起：通常，操作系统更倾向于挂起阻塞态进程而不是就绪态进程，因为就绪态进程可以立即执行，而阻塞态进程占用了内存空间但不能执行。但如果释放内存以得到足够空间的唯一方法是挂起一个就绪态进程，那么这种转换也是必需的。并且，如果操作系统确信高优先级的阻塞态进程很快就会就绪，那么它可能选择挂起一个低优先级的就绪态进程，而不是一个高优先级的阻塞态进程。 通俗的说，就是挂起不挂起，不光要考虑为进程让出空间，不光要考虑是否就绪，还要考虑进程的优先级。 新建-&gt;就绪挂起及新建-&gt;就绪：当创建一个新进程时，该进程或者加入就绪队列，或者加入就绪/挂起队列。不论哪种情况，操作系统都必须建立一些表管理进程，并为进程分配地址空间。操作系统可能更倾向于在初期执行这些辅助工作，这使得它可以维护大量的未阻塞的进程。通过这一策略，内存中经常会没有足够的足够的空间分配给新进程。因此使用了（新建-&gt;就绪/挂起）转换。另一方面，我们可以证明创建进程时适时（just-in-time）原理，即尽可能推迟创建进程以减少操作系统的开销，并在系统被阻塞态进程阻塞时允许操作系统执行进程创建任务。 阻塞/挂起-&gt;阻塞：这种转化在设计中比较少见，如果一个进程没有准备好执行，并且不在内存中，调入它又有什么意义？但是考虑到下面的情况：一个进程终止，释放了一些内存空间，阻塞/挂起队列中有一个进程优先级比就绪/挂起队列中任何进程的优先级都要高，并且操作系统有理由相信阻塞进程的事件很快就会发射管，这时，把阻塞进程而不是就绪进程调入内存是合理的。 运行-&gt;就绪/挂起：通常当分配给一个运行进程的时间期满时，它将转换到就绪态。但是，如果由于位于阻塞/挂起队列中具有较高优先级的进程变得不再被阻塞，操作系统抢占这个进程，也可以直接把这个运行进程转换到就绪/挂起队列中，并释放一些内存空间。 各种状态/退出：在典型情况下，一个进程在运行时终止，或者是因为它已经完成，或者是因为出现了一些错误条件。但是，在某些操作系统中，一个进程可以被创建它的进程终止，或者当父进程终止时终止。如果允许这样，则进程在任何状态时都可以转换到退出态。 COW机制 COW机制简单来说就是fork的时候，子进程和父进程共用相同的内存，只有在修改的时候，拷贝原有内存当做一份私有的，在私有的基础上修改。 123456789101112131. fork的时候，进行如下处理。 1. VM_SHARE = 0，且页表P=1，将父进程的页表中的PTE_W记为0，这样这份内存只读不写。 如果考虑换入换出，应该注意，该页不能被换出，不然页表会不一致，所以我采取的办法是将该页设置为不可换出。 2. VM_SHARE = 0，且页表P=0，那么我们将页换入，然后按1和3做，或者也可以直接拷贝，并写入硬盘（比较麻烦）。 3. VM_SHARE = 1，不用cow机制。 段机制在这里不是特别好处理，我认为vma的管理就可以一定程度上取代段机制。2. 访问的时候如果发现pagefault，查看error_code和对应vmm的权限，如果发现 页存在，写出错，vmm可以写，那么我们进行处理。 1. VM_SHARE = 1，也就是说这块内存都是共享的，那么我们不应该对这块内存使用cow。 2. VM_SHARE = 0，新建对应的页表。 页存在，写出错，vmm不可以写，那就是错误异常了。 页不存在，写出错，vmm可以写 那么我们应该先把这一页换进来，再进行上面处理。 Page_fault Page_fault page_fault 造成page_fault的情况 造成page fault有两种情况 线性地址转换无效； 线性地址转换有效，但权限不合法。 线性地址转换无效的原因 页表项的P位为0，或保留位reserved为1。 error code的P位 如果页表项的P位为0，则error code的P位为0。 error code的P位 - P位为0时，表示page-fault缺页（准确来说，是entry的P位为0）。 - P位为1时，则不是因为缺页，而是因为page-level protection violation，即我们应该检测后面的标志位。 ucore的do_pgfault中 P为0的处理，即case 0和case 2，作为缺页处理，没问题。 P为1时，这时应该检测后面的标志位。先看case 1，ucore直接failed，也就是说，非缺页的读操作产生的page fault，ucore不做处理（后面的U/S、RSVD或I/D的错误），可以理解，没问题。再看看case 3，ucore先检测虚地址管理vma的写位，如果vma有写的权限，而发生了page fault，那么可能是entry没有写权限，因此可以尝试在entry添加上写权限。问题在于，如果不是因为entry的写权限造成的page fault的呢？此时ucore将陷入死循环！ 简单总结 ucore的page fault处理P=1,W/R=1的情况时，只处理了因为entry缺少写权限的情况，而没有考虑entry有写权限而由其它权限造成的异常，该处理可能导致ucore陷入死循环。赞同高思达同学对此处的质疑。 缺页中断 ①页表项全为0——虚拟地址与物理地址未建立映射关系或已被撤销。 ②物理页面不在内存中——需要进行换页机制。 ③访问权限不够——输出错误信息，并退出。 孤儿进程与僵尸进程 我们知道在unix/linux中，正常情况下，子进程是通过父进程创建的，子进程再创建新的进程。子进程的结束和父进程的运行是一个异步过程,即父进程永远无法预测子进程到底什么时候结束。 当一个 进程完成它的工作终止之后，它的父进程需要调用wait()或者waitpid()系统调用取得子进程的终止状态。 孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。 僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。 子进程通过exit()退出时，父进程既没有结束，也没有通过wait()等待子进程结束，则子进程成为“僵尸进程(zombie) unix提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是: 在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait / waitpid来取时才释放。 但这样就导致了问题，如果进程不调用wait / waitpid的话， 那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。 孤儿进程是没有父进程的进程，孤儿进程这个重任就落到了init进程身上，init进程就好像是一个民政局，专门负责处理孤儿进程的善后工作。每当出现一个孤儿进程的时候，内核就把孤 儿进程的父进程设置为init，而init进程会循环地wait()它的已经退出的子进程。这样，当一个孤儿进程凄凉地结束了其生命周期的时候，init进程就会代表党和政府出面处理它的一切善后工作。因此孤儿进程并不会有什么危害。 任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时 处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。 如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。 设置僵死状态的目的是维护子进程的信息，以便父进程在以后某个时候获取。这些信息包括了子进程的进程ID、终止状态以及资源利用信息（CPU时间、内存使用量等等）。如果一个进程终止（使其所有子进程变成孤儿进程），而该进程有子进程处于僵死状态，那么它的所有僵死子进程的父进程ID将被重置为1（init进程）。继承这些子进程的init进程将清理它们（也就是init进程将wait它们，从而除去它们的僵死状态）。 Belady现象 Clock算法有Belady现象 123412512345 实例 X86寄存器 通用寄存器 段寄存器 CS(代码段) DS(数据段) 指令寄存器 和标志寄存器 EIP：指令寄存器， EIP的低16位即8086的ip， 储存的是下一条要执行的指令的内存地址，在分段地址转换中，表示指令的段内便宜地址 EFLAGS: 标志寄存器， 中断允许标志位（IF）, CLI（禁止中断）、STI两个命令控制， CF,PF，ZF等等寄存器 用户态或内核态下的中断处理有什么区别？在trapframe中有什么体现 用户态进入中断时，由于涉及到从用户态进入内核态，需要从用户栈切换到内核栈，因此需要多保存ss（堆栈段）和esp（栈顶）两个寄存器，先在栈中压入这两个值。再压入error code，cs，eip，flags。 而内核态进入中断时，不需要设计栈的切换，因此只需要压入error code，cs，eip，flags。 在trapframe数据结构中： 12345678910111213141516171819202122struct trapframe &#123; struct pushregs tf_regs; uint16_t tf_gs; uint16_t tf_padding0; uint16_t tf_fs; uint16_t tf_padding1; uint16_t tf_es; uint16_t tf_padding2; uint16_t tf_ds; uint16_t tf_padding3; uint32_t tf_trapno; /* below here defined by x86 hardware */ uint32_t tf_err; uintptr_t tf_eip; uint16_t tf_cs; uint16_t tf_padding4; uint32_t tf_eflags; /* below here only when crossing rings, such as from user to kernel */ uintptr_t tf_esp; uint16_t tf_ss; uint16_t tf_padding5;&#125; __attribute__((packed)); 注释的那一行“below here only hwn crossing rings”，就表示ss和esp只需要在切换特权级（即从用户态到内核态）时需要保存。 x86特权级 linux操作系统CPL、DPL、RPL说明 Linux操作系统中特权级有3种：CPL,DPL和RPL，每个都是有4个等级。 我对他们的关系理解是这样：一般来说，CPL代表当前代码段的权限，如果它想要去访问一个段或门，首先要看看对方的权限如何，也就是检查对方的DPL，如果满足当前的权限比要访问的权限高，则有可能允许去访问，有些情况我们还要检查 选择子的权限，即RPL,因为我们通过选择子:偏移量的方式去访问一个段，这算是一个访问请求动作，因此 称为请求访问权限RPL(Requst Privilege Level)。当请求权限也满足条件，那么访问就被允许了。 CPL(Current Privilege Level) CPL是当前执行的任务的特权等级，它存储在CS和SS的第0位和第1位上。(两位表示0~3四个等级) 通常情况下，CPL等于代码所在段的特权等级，当程序转移到不同的代码段时，处理器将改变CPL。 注意:在遇到一致代码段时，情况特殊，一致代码段的特点是：可以被等级相同或者更低特权级的代码访问，当处理器访问一个与当前代码段CPL特权级不同的一致代码段时，CPL不会改变。 DPL(Descriptor Privilege Level) 表示门或者段的特权级，存储在门（中断描述符IDT）或者段的描述符（GDT）的DPL字段中。正如上面说的那样，当当前代码段试图访问一个段或者门时，其DPL将会和当前特权级CPL以及段或门的选择子比较，根据段或者门的类型不同，DPL的含义不同： 1.数据段的DPL：规定了访问此段的最低权限。比如一个数据段的DPL是1，那么只有运行在CPL为0或1的程序才可能访问它。为什么说可能呢？因为还有一个比较的因素是RPL。访问数据段要满足有效特权级别（上述）高于数据段的DPL. 2.非一致代码段的DPL(不使用调用门的情况)：DPL规定访问此段的特权，只有CPL与之相等才有可能访问。 3.调用门的DPL，规定了程序或任务访问该门的最低权限。与数据段同。 4.一致代码段和通过调用门访问的非一致代码段，DPL规定访问此段的最高权限。 比如一个段的DPL为2，那么CPL为0或者1的程序都无法访问。 5. TSS的DPL，同数据段。 RPL（Rquest Privilege Level） RPL是通过选择子的低两位来表现出来的(这么说来，CS和SS也是存放选择子的，同时CPL存放在CS和SS的低两位上，那么对CS和SS来说，选择子的RPL=当前段的CPL)。处理器通过检查RPL和CPL来确认一个访问是否合法。即提出访问的段除了有足够的特权级CPL，如果RPL不够也是不行的(有些情况会忽略RPL检查)。 为什么要有RPL？ 操作系统往往通过设置RPL的方法来避免低特权级的应用程序访问高特权级的内层数据。 例子情景：调用者调用操作系统的某过程去访问一个段。 当操作系统(被调用过程)从应用程序(调用者)接受一个选择子时，会把选择子的RPL设置称调用者的权限等级，于是操作系统用这个选择子去访问相应的段时(这时CPL为操作系统的等级,因为正在运行操作系统的代码)，处理器会使用调用者的特权级去进行特权级检查，而不是正在实施访问动作的操作系统的特权级(CPL)，这样操作系统就不用以自己的身份去访问(就防止了应用去访问需要高权限的内层数据,除非应用程序本身的权限就足够高)。 那么RPL的作用就比较明显了：因为同一时刻只能有一个CPL，而当低权限的应用去调用拥有至高权限的操作系统的功能来访问一个目标段时，进入操作系统代码段时CPL变成了操作系统的CPL，如果没有RPL，那么权限检查的时候就会用CPL，而这个CPL权限比应用程序高，也就可能去访问需要高权限才能访问的数据，这就不安全了。所以引入RPL，让它去代表访问权限，因此在检查CPL的同时，也会检查RPL.一般来说如果RPL的数字比CPL大(权限比CPL的低)，那么RPL会起决定性作用。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务器配置相关问题]]></title>
      <url>%2F2017%2F03%2F31%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[服务器配置相关记录 Apache的反向代理 首先是库之类的环境配置， 如果是编译的，./configure附加–enable-proxy参数，把代理模块编译进来。 如果是安装好的，就在配置文件http.conf里启用相应的模块 LoadModule proxy_module modules/mod_proxy.so LoadModule proxy_http_module modules/mod_proxy_http.so 有的服务器该配置文件为, /etc/apache2/apache2.conf 12LoadModule proxy_module /usr/lib/apache2/modules/mod_proxy.soLoadModule proxy_http_module /usr/lib/apache2/modules/mod_proxy_http.so 123456789101112131415&lt;VirtualHost *:80&gt; ServerAlias wordpress.zhangshenghao.win ServerName wordpress.zhangshenghao.win ProxyPassReverse / http://pi.zhangshenghao.win/wordpress/ ProxyPass / http://pi.zhangshenghao.win/wordpress/ &lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ServerAlias blog.zhangshenghao.win ServerName blog.zhangshenghao.win ProxyPassReverse / http://pi.zhangshenghao.win/qingfeng14.github.io/ ProxyPass / http://pi.zhangshenghao.win/qingfeng14.github.io/ &lt;/VirtualHost&gt; 1234567&lt;VirtualHost *:80&gt; ServerAlias www.zhangshenghao.win ServerName www.zhangshenghao.win # ProxyPassReverse / http://pi.zhangshenghao.win/wordpress/ DocumentRoot /var/www/html/qingfeng14.github.io/ &lt;/VirtualHost&gt; 服务器重启 1sudo /etc/init.d/apache2 restart 开启HTTPS 代理 开启HTTPS步骤 更全 步骤1：生成密钥 1openssl genrsa 1024 &gt; server.key 说明：这是用128位rsa算法生成密钥，得到server.key文件 步骤2: 生成证书请求文件 1openssl req -new -key server.key &gt; server.csr 说明：这是用步骤1的密钥生成证书请求文件server.csr, 这一步提很多问题，一一输入 1234567891011Country Name (2 letter code) [AU]:CN ← 国家代号，中国输入CN State or Province Name (full name) [Some-State]:BeiJing ← 省的全名，拼音 Locality Name (eg, city) []:BeiJing ← 市的全名，拼音 Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名 Organizational Unit Name (eg, section) []: ← 可以不输入 Common Name (eg, YOUR name) []: ← 此时不输入 Email Address []:admin@mycompany.com ← 电子邮箱，可随意填Please enter the following ‘extra’ attributes to be sent with your certificate request A challenge password []: ← 可以不输入 An optional company name []: ← 可以不输入 步骤3: 生成证书 1openssl req -x509 -days 3650 -key server.key -in server.csr &gt; server.crt 说明：这是用步骤1,2的的密钥和证书请求生成证书server.crt，-days参数指明证书有效期，单位为天 1sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf let’s encrypt 12Generating key (2048 bits): /etc/letsencrypt/keys/0001_key-certbot.pemCreating CSR: /etc/letsencrypt/csr/0001_csr-certbot.pem 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;VirtualHost _default_:443&gt; ServerAdmin zhangshenghao1995@163.com DocumentRoot /var/www/html/qingfeng14.github.io/ ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined # SSL Engine Switch: # Enable/Disable SSL for this virtual host. SSLEngine on # A self-signed (snakeoil) certificate can be created by installing # the ssl-cert package. See # /usr/share/doc/apache2/README.Debian.gz for more info. # If both key and certificate are stored in the same file, only the # SSLCertificateFile directive is needed. SSLCertificateFile /etc/letsencrypt/live/zhangshenghao.win/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/zhangshenghao.win/privkey.pem &lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt; SSLOptions +StdEnvVars &lt;/FilesMatch&gt; &lt;Directory /usr/lib/cgi-bin&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; BrowserMatch &quot;MSIE [2-6]&quot; \ nokeepalive ssl-unclean-shutdown \ downgrade-1.0 force-response-1.0 # MSIE 7 and newer should be able to use keepalive BrowserMatch &quot;MSIE [17-9]&quot; ssl-unclean-shutdown ServerName zhangshenghao.win &lt;/VirtualHost&gt; &lt;VirtualHost _default_:443&gt; ServerAdmin zhangshenghao1995@163.com DocumentRoot /var/www/html/qingfeng14.github.io/ ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined # SSL Engine Switch: # Enable/Disable SSL for this virtual host. SSLEngine on # A self-signed (snakeoil) certificate can be created by installing # the ssl-cert package. See # /usr/share/doc/apache2/README.Debian.gz for more info. # If both key and certificate are stored in the same file, only the # SSLCertificateFile directive is needed. SSLCertificateFile /etc/letsencrypt/live/blog.zhangshenghao.win/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/blog.zhangshenghao.win/privkey.pem &lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt; SSLOptions +StdEnvVars &lt;/FilesMatch&gt; &lt;Directory /usr/lib/cgi-bin&gt; SSLOptions +StdEnvVars &lt;/Directory&gt; BrowserMatch &quot;MSIE [2-6]&quot; \ nokeepalive ssl-unclean-shutdown \ downgrade-1.0 force-response-1.0 # MSIE 7 and newer should be able to use keepalive BrowserMatch &quot;MSIE [17-9]&quot; ssl-unclean-shutdown ServerName blog.zhangshenghao.win &lt;/VirtualHost&gt; http 重定向至 http 12RewriteEngine OnRewriteRule ^ https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125; [END,NE,R=permanent]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[计算机系统结构]指令系统]]></title>
      <url>%2F2017%2F03%2F26%2F%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E5%B1%82%E6%AC%A1%E5%AD%98%E5%82%A8%2F</url>
      <content type="text"><![CDATA[程序访问的局部性原理：时间局部性，空间局部性 存储系统的多级层次结构 CPU-&gt;M1-&gt;M2–。。。。。。.&gt;Mn 在存储层次中，各存储器中一般满足包含关系,即任何一层存储器中的内容都是其下一层存储（离CPU更远一级）中内容的子集 CPU与M1一般以字为单位传递，M1以外一般以块/页为单位传递数据 存储系统性能参数 存储容量S 一般来说，整个存储系统的存储容量即为最后一级存储器的容量，eg:cache + 主存的存储系统容量为主存容量 存储系统的平均每位价格C 命中率H CPU 访问该存储系统时，在M1中找到所需信息的概率 平均访存时间\(T_A\) 命中时间 不命中开销：访一级时间 + 数据传送时间 三级存储系统：Cache + 主存 + 磁盘 cache-主存层次：为了弥补主存速度的不足，一般是硬件完成的，对应用程序员和系统程序员是透明的 主存-辅存层次：为了弥补主存容量的不足，常被用于实现虚拟存储器，向编程人员提供用不完的程序空间，主要由软件完成 存储层次的四个问题 映像规则 查找算法 替换算法 写策略 Cache cache 基本结构及原理 cache是按块管理的，cache和主存均被分成大小相同的块，信息以块为单位调入cache中 主存地址： 块地址（块号） | 块内偏移 主存地址寄存器–》主存-Cache地址转换部件 –》 命中，Cache块地址，根据偏移在Cache存储体中查到对应的数据指令送给CPU -》 未命中，访主存储器，调入Cache（是否需要替换），送给CPU，或者直接送给CPU提高效率 Cache 映像规则 全相联映射 主存中的人意块可以放到Cache中的任意一个位置 ### 直接映射 主存中每一块只能放到Cache中的唯一一个位置，对应关系依次循环分配 主存的第i块（块地址为i）映射到Cache的第j块 \[j = i mod M\] M为Cache的快数， 若\(M = 2^m\)，则j实际上是i的低m位（注意是块地址的低m位），可用这m位去进行选择（索引） 组相连映像 Cache被分为若干组，每个组由若干块组成，主存中每一个块可以放到Cache中唯一一个组的任意一个位置。组的选择通常采用位选择方法 对于主存中的第i个块，若它映射到Cache中的组号为j，则 \[j = i mdo G\] G为Cache的组数，当\(G=2^g\)时，k为块号i的低g位，这里的低g位称为索引 如果每组有n 个块，则称该映像规则为n路组相联 n值越大，Cache的空间利用率就越高，块冲突的概率就越低 查找方法 Cache中设置有一个目录表，每一个Cache块在该表中均有唯一的一项，用于指出当前该块存放的信息是哪个主存块的（一般有多个主存块映射到该Cache块，它实际上记录了该主存块的块地址的高位部分，称为标识），每个主存块能唯一地由其标识来确定 12主存地址： 标识 | 索引 | 块内偏移 ____块地址__ 经典的CPU性能公式 现在我们可以用指令数、CPI和时钟周期时间来写出基本的性能公式： CPU时间=指令数×CPI×时钟周期时间 CPI（clock cycles per instruction）：每条指令的时钟周期数，表示执行某个程序或者程序片段时每条指令所需的时钟周期平均数。 指令数（instruction count）：执行某程序所需的总指令数量。 或 CPU时间=指令数×CPI/时钟频率 永远记住，唯一能够被完全可靠测量的计算机性能指标是时间。例如，对指令集减少指令数目的改进可能降低时钟周期时间或提高CPI，从而抵消了改进的效果。类似地，CPI与执行的指令类型相关，执行指令数最少的代码其执行速度未必是最快的。 写分配法 张晨曦 按写分配法：写失效时，先把所写单元所在的块调入 Cache，然后再进行写入。这与读失效类似。这种方法也称为写时取方法。 不按写分配法：写失效时，直接写入下一级存储器而不将相应的块调入 Cache。这种方法也称为绕写法。 写策略 写Cache时何时更新主存中的内容 写直达法： 执行写操作时，不仅把数据写入Cache中对应的块，还把数据写入下一级存储器 写回法： 拷回法，只把数据写回cache，Cache块被替换时写回下一级存储器]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[操作系统-页面置换算法]]></title>
      <url>%2F2017%2F03%2F25%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95%2F</url>
      <content type="text"><![CDATA[置换算法的功能和目标 功能 当出现缺页异常，需调入新页面而内存已满时，置换算法选择被置换的物理页面 设计目标 尽可能减少页面的调入调出次数 把未来不再访问或短期内不访问的页面调出 页面锁定(frame locking) 描述必须常驻内存的逻辑页面 操作系统的关键部分 要求响应速度的代码和数据 页表中的锁定标志位(lock bit) 置换算法的评价方法 记录进程访问内存的页面轨迹 评价：模拟页面置换算法，记录缺页的次数，更少的缺页意味着更好的性能 页面置换算法分类 局部页面置换算法：着眼于当前进程 最优算法，先进先出算法，最近最久未使用算法，时钟算法，最不常用算法 全局页面置换算法：着眼于所有可换出的物理页面 工作集算法，缺页率算法 局部页面置换算法 最优页面置换算法 OPT 置换未来最长时间不访问的页面 实际系统中无法实现 FIFO算法 思路： 选择在内存中滞留时间最长的页面进行置换 实现： 维护一个记录所有位于内存中的逻辑页面链表 链表元素按驻留内存时间排序，链首最长，链尾最短 出现缺页时，选择链首进行置换 特征： 实现简单 性能较差 Belady现象 时钟置换算法 思路：对页面的访问情况进行大致统计 实现： 在页表项增加访问位， 各页面组织成环形链表 指针指向最先调入的页面 算法： 访问页面时，在页表项记录页面访问情况 缺页时，从指针处开始顺序查找未被访问的页面进行置换 特征：是LRU和FIFO的折中 【Note】:访问位的标记是硬件自动完成的 具体流程 页面装入内存时，访问位初始化为0 访问页面（读/写)时，访问位置1 缺页时，从指针当前位置顺序检查环形链表 访问位为0，则置换该页 访问位为1，则访问位置0，并指针移动到下一个页面， 直到找到可置换的页面 全局页面置换算法 工作集页置换算法 工作集 \(W(t, \Delta)\) t是当前的执行时刻 \(\Delta\) 是工作集窗口，即一个定长的页面访问时间窗口 \(W(t,\Delta)\)表示在当前时刻t前的\(\Delta\)时间窗口中的所有访问页面所组成的集合 \(|W(t,\Delta)|\)指工作集的大小，即页面数目 工作集页置换算法思路：换出不在工作集中的页面 窗口大小\(\tau\):当前时刻前\(\tau\)个内存访问的页引用是工作集，\(\tau\)被称为窗口大小 实现方法： 访存链表：维护窗口内的访存页面链表 访存时，换出不在工作集的页面，更新访存链表 缺页时，换出页面，更新访存链表]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ucore_lab]]></title>
      <url>%2F2017%2F03%2F23%2F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2Fucore-lab%2F</url>
      <content type="text"><![CDATA[ucore_lab 实验中一些重要结构体参数的含义 Page结构体 每个Page描述了一个物理页 12345678910111213141516/* * * struct Page - Page descriptor structures. Each Page describes one * physical page. In kern/mm/pmm.h, you can find lots of useful functions * that convert Page to other data types, such as phyical address. * */struct Page &#123; int ref; // page frame&apos;s reference counter // 页帧的reference uint32_t flags; // array of flags that describe the status of the page frame // 描述页帧的标记位， unsigned int unsigned int property; // the num of free block, used in first fit pm manager // 空闲块的数量， 用于first fit算法 list_entry_t page_link; // free list link // page_link&#125;; set_bit, clear_bit宏 123456set_bit(int nr,void *addr)；// 将addr中第nr位的值置为1 返回addr原第nr为的值，即0或者1clear_bit(int nr,void *addr)；// 将addr中第nr位的值置为0 返回addr原第nr为的值的反码test_bit(int nr, volatile void *addr) // 改为是否为1， 是1返回1，是0返回0 123456#define SetPageReserved(page) set_bit(PG_reserved, &amp;((page)-&gt;flags))#define ClearPageReserved(page) clear_bit(PG_reserved, &amp;((page)-&gt;flags))#define PageReserved(page) test_bit(PG_reserved, &amp;((page)-&gt;flags))#define SetPageProperty(page) set_bit(PG_property, &amp;((page)-&gt;flags))#define ClearPageProperty(page) clear_bit(PG_property, &amp;((page)-&gt;flags))#define PageProperty(page) test_bit(PG_property, &amp;((page)-&gt;flags)) 12#define PG_reserved 0 // if this bit=1: the Page is reserved for kernel, cannot be used in alloc/free_pages; otherwise, this bit=0 #define PG_property 1 // if this bit=1: the Page is the head page of a free memory block(contains some continuous_addrress pages), and can be used in alloc_pages; if this bit=0: if the Page is the the head page of a free memory block, then this Page and the mem. Or this Page isn't the head page. 12// convert list entry to page#define le2page(le, member) to_struct((le), struct Page, member)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数值分析]]></title>
      <url>%2F2017%2F03%2F21%2F%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[设𝑨,𝑩,𝑪均为𝑛×𝑛矩阵，且𝑩、𝑪非奇异，𝒃是𝑛维向量，要计算\(𝒙 = B^{-1} (2A+I)(C^{-1}+A)b\), 请给出一个合理、高效率的算法流程. \[y1 = C^{-1}b\] \[y2 = y1 + Ab\] \[y_3 = 2(Ay_2) + y_2\] \[ x = B^{-1}y_3\] 如果A的每个对角元的绝对值都比所在行的非对角元的绝对值的和要大,即 \[|a_{ii}|&gt;sum{j!=i}|a_{ij}|\] 对所有的i成立,那么称A是（行）严格对角占优阵. 如果A’是行严格对角占优阵,那么称A是列严格对角占优阵. 习惯上如果不指明哪种类型的话就认为是行对角占优. 矩阵特征值的几何意义 矩阵乘法对应了一个变换，是把任意一个向量变成另一个方向或长度都大多不同的新向量。在这个变换的过程中，原向量主要发生旋转、伸缩的变化。如果矩阵对某一个向量或某些向量只发生伸缩变换，不对这些向量产生旋转的效果，那么这些向量就称为这个矩阵的特征向量，伸缩的比例就是特征值。 实际上，上述的一段话既讲了矩阵变换特征值及特征向量的几何意义（图形变换）也讲了其物理含义。物理的含义就是运动的图景：特征向量在一个矩阵的作用下作伸缩运动，伸缩的幅度由特征值确定。特征值大于1，所有属于此特征值的特征向量身形暴长；特征值大于0小于1，特征向量身形猛缩；特征值小于0，特征向量缩过了界，反方向到0点那边去了。 特征值及特征向量定义 定义 设A是n阶方阵，如果数λ和n维非零列向量x使关系式 Ax=λx (1) 成立，那么这样的数λ称为矩阵A特征值，非零向量x称为A的对应于特征值λ的特征向量．（1）式也可写成， ( A-λE)X=0 (2) 这是n个未知数n个方程的齐次线性方程组，它有非零解的充分必要条件是系数行列式 |A-λE|=0 , (3) 特征值 来自维基百科的解释 在数学上，特别是线性代数中，对于一个给定的线性变换\(A\)，它的特征向量（eigenvector，也译固有向量或本征向量）\(v\) 经过这个线性变换之后，得到的新向量仍然与原来的\(v\)保持在同一条直线上，但其长度或方向也许会改变。即 \[ Av=\lambda v\] \(\lambda\) 为标量，即特征向量的长度在该线性变换下缩放的比例，称 \(\lambda\) 为其特征值（本征值）。如果特征值为正，则表示\(v\)在经过线性变换的作用后方向也不变；如果特征值为负，说明方向会反转；如果特征值为0，则是表示缩回零点。但无论怎样，仍在同一条直线上。图1给出了一个以著名油画《蒙娜丽莎》为题材的例子。在一定条件下（如其矩阵形式为实对称矩阵的线性变换），一个变换可以由其特征值和特征向量完全表述，也就是说：所有的特征向量组成了这向量空间的一组基底。一个特征空间(eigenspace)是具有相同特征值的特征向量与一个同维数的零向量的集合，可以证明该集合是一个线性子空间，比如 \[ E_{\lambda}=\{u \in V\mid Au=\lambda u\}\] 即为线性变换 A中以λ为特征值的特征空间。 这些概念在纯数学和应用数学的众多领域中都有重要的应用。在线性代数和泛函分析之外，甚至在一些非线性的情况下，这些概念都是十分重要的。 \(\mathbf{A}\)的特征向量\(\mathbf {x}\) ，按照定义，是在变换 \(\mathbf{A}\)的作用下会得到 \(\mathbf {x}\) 自身的若干倍的非零向量。假设在 \(\mathbf{A}\)的作用下 \(\mathbf {x}\) 变成了自身的 \(\lambda\) 倍，也就是 \(\mathbf{A} \mathbf{x} = \lambda \mathbf{x}\) 在等式两边的左侧乘以单位矩阵I，得到 \[\mathbf{IA} \mathbf{x} =\mathbf{I} \cdot \lambda \mathbf{x} \] \(\mathbf{A}\mathbf{x} = (\lambda I)\mathbf{x}\) 因此 \((\mathbf{A}-\lambda \mathbf{I}) \mathbf{x}=0\) 根据线性方程组理论，为了使这个方程有非零解，矩阵 \(\mathbf{A}-\lambda \mathbf{I}\)的行列式必须是零： \[\det(\mathbf{A}-\lambda \mathbf{I}) = 0\] 按照行列式的展开定义，上面式子的左端是一个关于 \(\lambda\) 的多项式，称为特征多项式。这个多项式的系数只和 \(\mathbf{A}\)有关。在这个例子中，可以计算这个特征多项式： \[\det\!\left(\begin{bmatrix}1 &amp; 0\\ -\frac{1}{2} &amp; 1\end{bmatrix} - \lambda\begin{bmatrix}1 &amp; 0\\ 0 &amp; 1\end{bmatrix} \right)=(1-\lambda)^2\] 在这种情况下特征多项式的方程变成 \[(1-\lambda)^2 = 0\]它的唯一的解是： \(\lambda=1\)。这就是矩阵 \(\mathbf{A}\)的特征值。 找到特征值 \(\lambda=1\)后，就可以找出 \[(\mathbf{A}-\lambda \mathbf{I}) \mathbf{x}=0\] 的非零解，也就是特征向量了。在例子中： \[\begin{bmatrix}1-\lambda &amp; 0\\ -\frac{1}{2} &amp; 1-\lambda \end{bmatrix}\begin{bmatrix}x_1\\ x_2\end{bmatrix}=0\] 将\(\lambda=1\)代入，就有 \[\begin{bmatrix}0 &amp; 0\\ -\frac{1}{2} &amp; 0 \end{bmatrix}\begin{bmatrix}x_1\\ x_2\end{bmatrix}=0\] 解这个新矩阵方程，得到如下形式的解： \[\mathbf{x} = \begin{bmatrix}0\\ c\end{bmatrix}\] 这里的c是任意非零常量。因此，矩阵\(\mathbf{A}\)的特征向量就是所有竖直方向的向量（比如图中红色箭头代表的向量）。 正定矩阵的判定 判定定理1：对称阵A为正定的充分必要条件是：A的特征值全为正。 判定定理2：对称阵A为正定的充分必要条件是：A的各阶顺序主子式都为正。 判定定理3：任意阵A为正定的充分必要条件是：A合同于单位阵。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[机器学习-朴素贝叶斯]]></title>
      <url>%2F2017%2F03%2F19%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%2F</url>
      <content type="text"><![CDATA[朴素贝叶斯原理 youryion数据挖掘指导 朴素贝叶斯法属于一种分类方法，基于特征条件独立假设学习输入输出的联合概率分布，以此为模型，对于给定的输入x，利用贝叶斯定理求出后验概率最大的输出y。 简单有效，是一种常用的机器学习方法. 设输入空间 \(X \subseteq R^n\)为n维向量的集合 输出空间为类标记集合 \(Y=c_1, c_2,\cdots,c_k\) X是定义在输入空间上的随机变量 Y是定义在输出空间上的随机变量 P(X,Y)是X和Y的联合概率分布 \(T = (x_1, y_1), (x_2, y_2), \cdots, (x_N, y_N)\)是由P(X,Y)独立同分布产生的训练集 贝叶斯法则 条件概率 条件概率表示为P（A|B），读作“在B条件下A的概率”。 若只有两个事件A，B，那么 \[P(A|B) = \frac{P(AB)}{P(B)}\] 贝叶斯法则 引入独立性假设 得到朴素贝叶斯分类器 拉普拉斯平滑]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[机器学习实验-朴素贝叶斯分类器]]></title>
      <url>%2F2017%2F03%2F18%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E9%AA%8C-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8%2F</url>
      <content type="text"><![CDATA[提示：个人联系方式及代码简要说明、运行方式在README.md文件中 实验目的 在真实数据集上实现朴素贝叶斯分类器，并验证其分类效果 了解如何在测试数据集上实现一个机器学习算法 了解如何评价分类效果 了解如果分析实验结果 算法实现原理 假设各条件相互间独立，即\[P(y|x_1,\cdots,x_n)P(y) \propto \prod_{i=1}^{n}P(x_i|y)\] 在训练时训练 \(P(y)\) 以及\(P(x_i|y)\) 测试时输出 \[\hat y = argmax_yP(y)\prod_{i=1}^{n}P(x_i|y)\] 数据集处理 数据集描述 实验给定了Adult数据集，其中adult.train为训练集（32561条数据），adult.test为测试集(16281条数据)，每行数据代表一个人，共有15个维度的特征，最后一个特征为该人的收入是否超过了50K。 数据集中部分特征是连续数据，部分数据可能未知(用?表示) 分类器的性能评价指标： 本次实验中，我采用了准确率作为朴素贝叶斯分类器性能的评价指标，计算方法为： \[Accuracy = \frac{number\ of\ correctly\ classified\ records}{number\ test\ records}\] 数据集的变量及其含义 变量名 意义 数据特征 处理方式 age 年龄 连续数据 分段离散 work_class 职业类型 离散数据 fnlwgt 最终重量(?) 连续数据 无意义、忽略 education 学历等级 离散数据 education_num 学历的数字等级 连续数据 重复、忽略 marital-status 婚姻状况 离散数据 occupation 职业 离散数据 relationship 家庭关系 离散数据 race 人种 离散数据 sex 性别 离散数据 capital_gain 资本利得 连续数据 离散化 capital_loss 资本损失 连续数据 离散化 hours_per_week 每周工作时长 连续数据 离散化 native-country 出生国 离散 income 收入 离散 特殊数据的处理方式 未知数据？的处理 数据集中有未知的数据(?), 我的处理方式是将这类数据直接忽略掉 数据合并 使用R语言对数据进行统计，发现，Never-worked和Without-pay可以合并为Without-pay字段。 数据的离散化 数据规律探索 考虑到R语言对数据处理的优越性，因此采用R语言对数据规律进行探索，利用R语言读入测试集和训练集 123456# 读取测试集，已清除？test = read.csv("after.test", sep=",", header=F, col.names=c("age", "work_class", "fnlwgt", "education", "education_num", "marital-status", "occupation", "relationship", "race", "sex", "capital_gain", "capital_loss", "hourr_per_week","native-country", "income"), fill = FALSE, strip.white = T) 然后对连续数据做统计之后得到如下结果 Age的规律 12345678&gt; table(train$age) 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 328 447 594 629 621 674 824 752 799 745 789 808 774 813 851 789 837 836 828 852 828 791 786 765 769 741 743 704 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 706 711 683 523 555 575 571 455 448 394 386 343 337 344 332 276 259 213 186 173 136 110 111 90 80 64 54 40 73 74 75 76 77 78 79 80 81 82 83 84 85 86 88 90 49 38 34 29 20 14 15 16 13 7 5 8 3 1 3 35 可知年龄范围为17~90，我们设置其分割粒度为5 资本收益 资本收益 可以从统计结果看出，投资收益相互间差别很大，直接以固定颗粒度分割并不适合，考虑到投资和收入之间存在一定的关系，而且可以很明显的看出收益为0的占了所有数据的大部分，我们将其分为三个类别，没有资本收益，资本收益较少，资本收益较大，。 除去数据中为0的值之后，求得其平均值，中位数，方差如下： 123456789&gt; # 资本收益平均值&gt; mean(train$capital_gain[train$capital_gain!=0])[1] 12977.6&gt; # 资本收益中位数&gt; median(train$capital_gain[train$capital_gain!=0])[1] 7298&gt; # 资本收益方差&gt; sd(train$capital_gain[train$capital_gain!=0])[1] 22311.91 可以看出其方差较大，以平均值作为界点不合适，我们取其中位数作为资本收益高低的界点(训练集与测试集这个数据差别不大) 同理，资本损失的数据也有这样的规律，我们也用这样的方法对其进行处理。 123456789&gt; # 资本损失平均值&gt; mean(train$capital_loss[train$capital_loss!=0])[1] 1867.898&gt; # 资本损失中位数&gt; median(train$capital_loss[train$capital_loss!=0])[1] 1887&gt; # 资本损失收益方差&gt; sd(train$capital_loss[train$capital_loss!=0])[1] 361.8574 资本损失的差异值不大，我们直接取中位数作为分界点 每周工作时间 每周工作时间 工作时间为1~99， 分割粒度设置为5 各连续变量的范围及对应的分割粒度如下： 变量名 范围 分割粒度 age 17~90 5 capital_gain 0 ~ 99999 0，0~7298，7298+ capital_loss 0 ~ 4356 0，0~1887， 1887+ hours_per_week 1~99 5 实验结果的分析 训练集规模的影响 问题：训练集的规模对分类效果有什么影响？ 选取5%， 50%， 100%的训练集数据训练分类模型 测试数据的选择，经过多方面的对比测试，发现选取的特征值为 1年龄 工作类别 学历等级 婚姻状况 职业 投资利得 投资损失 收入 时，训练的模型分类效果最好。以此为基础，分别选取 5%， 50%， 100%的训练集数据训练分类模型时的训练结果对比如下： 比例 训练集数目 准确率 5% 1494 83.71% 50% 15075 83.99% 100% 30162 84.12% 由这个表格可以看出，随着数据集的增加，分类器的分类效果越来越好。而实际上，即使只取了5%（1494条训练数据），训练出的分类器分类效果仍然挺好的，可以由此体会到贝叶斯分类的高效性和实用性。 重复随机抽取样本实验（5次），记录最小，最大，平均准确率 随机比例 训练集数目 准确率 70.13% 21131 83.99% 47.92% 14458 84.01% 94.40% 28472 84.04% 58.65% 17687 84.14% 11.83% 3566 83.95% 最小值 最大值 平均值 83.95% 84.14% 84.03% 综合两个测试结果可以得出如下结论：数据集的规模会对分类效果产生一定影响，但这种影响并不是绝对的，当抽取的训练集具有随机性时，小训练集也有可能会有特别好的分类效果，不过整体来看，训练集规模越大，分类效果越好。 0概率的处理 当测试集中某个数据的某条特征值取了某个值\(x_i\)，但训练集中该特征值并没有取过该值\(x_i\)，则在训练时\(P(x_i|y) = 0\)，由此在做测试时计算其概率\[\hat y = argmax_yP(y)\prod_{i=1}^{n}P(x_i|y)\]时会得到概率为0。 解决方法：通常我们会进行拉普拉斯平滑处理，即在计算条件概率时对每个\(x_i\) 做\(+\lambda\)处理, 对应的总数也需要做\(+M\lambda\)，经过测试可以发现，在未做拉普拉斯平滑时，训练集取50%时，分类准确率为83.95%， 加上拉普拉斯平滑处理之后，分类准确率为83.99%， 准确率有一定提升。 连续特征以及未知特征的处理 连续数据如何进行处理 说明：【数据的分析及离散化方案】见前面【3.4.3数据的离散化】小节。由于后期经过测试发现特征选取年龄 工作类别 学历等级 婚姻状况 职业 投资利得 投资损失 收入这8个特征时分类效果最好，故前面测试样例的特征选取均选择了这8个，为了测试连续数据分割方案对分类效果的影响，将每周工作时间这一连续特征加入分类的特征中。 测试时，训练集取100%， 拉普拉斯平滑处理的\(\lambda = 1\) 各连续特征值分割粒度与其分类效果对比 特征 分割粒度 准确率 age 不分割 83.816% age 3 83.831% age 5 83.751% age 10 83.784% 特征 分割粒度 准确率 hour 不分割 83.845% hour 3 83.845% hour 5 83.752% hour 10 83.804% 特征 分割粒度 准确率 投资收益与损失 不分割 【85.20%】 投资收益与损失 1000 83.62% 投资收益与损失 无，低，高 83.75% （注意：测试某一特征时，其余特征分割情况默认为： 年龄分割粒度 5， 每周工作时间分割粒度为5， 投资收益和损失分割为无， 收益/损失低, 收益/损失高） 结果分析：这里发现了一些很尴尬的结果，对这三个连续特征值进行不同粒度离散之后发现，【不进行离散】，直接以每一个数据单独作为一个类别进行分类时准确率反而比对其进行不同间距离散之后分类【准确率高】，特别是【投资收益与损失】的两个特征值，不进行离散时其准确率甚至高达 【85.2%】，而进行了等间距离散或者以无，低、高， 结合前面对各个特征的分布情况的统计可以进行如下猜测： 结合前面age, work hour, capital_gain, capital_loss几个特征值的取值特征统计结果， 可以发现，age和work hour在各个取值中虽然较为分散，但是也有小范围集中，简单的等间距离散，对其分类的优化效果不大，甚至于有可能因为粒度过大而使分类效果显著下降， 当分割粒度恰好使得集中数据分在了一个category时，其准确率会略高一点，而如果恰好使之分散开，可能会对分类准确率有反作用，如work hour特征分割粒度为5和10的对比。 对于投资收益和损失这两个特征值，分析其数据特征可以发现，有超过70%的数据是0，而其他数据就较为零散并且差异值极大，简单地等间距分割，或者以中位数，平均数作为临界点进行分割都是不太合理的，因此这种情况下不进行离散化分类效果反而会更好，（不知道高斯分布处理会不会优化其分类效果，由于能力和时间限制，没来得及进行测试） 未知数据如何处理 对于未知数据的处理，我做了两种情况的对比，一种是直接忽略掉这些数据，另一种是将‘？’也视为一种数据和特征 处理方案 准确率 忽略未知数据 84.12% 视为新类型 【84.45%】 可以看出，将未知数据视为一种特殊的新类型时其分类准确率有较大提高，可知这些数据某种程度上也能够反映出其收入的高低 选取的特征值对比 选取的特征值 准确率 年龄 工作类别 重量 学历等级 教育年限 婚姻状况 职业 家庭关系 人种 性别 投资利得 投资损失 每周工作时间 出生国 收入 79.77% 年龄 工作类别 学历等级 婚姻状况 职业 家庭关系 人种 性别 投资利得 投资损失 每周工作时间 出生国 收入 81.85% 年龄 工作类别 学历等级 婚姻状况 职业 家庭关系 性别 投资利得 投资损失 每周工作时间 出生国 收入 81.83% 年龄 工作类别 学历等级 婚姻状况 职业 人种 投资利得 投资损失 每周工作时间 收入 83.74% 年龄 工作类别 学历等级 婚姻状况 职业 投资利得 投资损失 每周工作时间 收入 83.75% 年龄 工作类别 学历等级 婚姻状况 职业 投资利得 投资损失 收入 84.12% 年龄 工作类别 教育年限 婚姻状况 职业 收入 81.79% 由这个表的对比分析可以明显地感受到特征值的选取对分类效果的影响,【年龄,工作类别,学历等级,婚姻状况,职业,投资利得,投资损失】这几个特征值能够很大程度上反应出其收入的高低，特别是投资收入和损失，这个特征与收入有较大的相关性，这也是为什么在【5.3.1 连续数据如何进行处理】一节中提到对这两个特征不进行分割时其分类效果甚至可以高达85.20%的一个原因。 这也提醒我们在选取训练数据时注意对特征值的选取，有代表性的特征对其分类准确率有促进作用，而一些无关的特征则会对分类效果有负作用。 交叉验证 选取不同比例的测试集数据用作训练，观察其对分类效果的影响 测试集比例 训练集+测试集 准确率 0% 15075 + 0 83.99% 5% 15075 + 751 84.02% 50% 15075 + 7525 84.23% 100% 15075 + 15060 84.26% [注] 训练集选取的是50%训练集数据 由这个数据对比可以看出，训练模型时加入部分测试集数据，对分类效果有提升作用。 实验总结及结论 本次实验实现了贝叶斯分类算法，并探讨了数据规模、特征值的选择对分类效果的影响，以及连续值，未知值的不同离散方案和处理方案对分类效果的影响，并探讨了拉普拉斯平滑对分类效果的影响。 通过多方面的对比，主要得出了以下一些结论: 特征值的选取对分类效果影响较大，可以根据特征值与类别的相关性大小判断其对分类是有帮助的还是有干扰的。 特征值个数也对分类效果有一定影响，选择合适的，足够的特征作为分类依据是较好的，特征值的选择和个数的选择可通过参数的调整进行尝试后得出最优方案 数据规模对分类效果有一定影响，但是只要特征值选取较好，训练数据较少情况下训练出的模型其分类效果也较好。 连续值的处理方式对分类效果影响较大，对于一些本身比较离散并且该特征值对类型影响较大情况下，分割粒度越小，分类效果会更好，尤其是本实验中投资收入和投资损失两个特征值，不进行分割时其准确率甚至高达85.2%，可明显体会到数据离散粒度对分类效果的影响。 未知数据的处理，未知数据视为一种特殊类型也是一种比较有效的处理方式，背后原因可能是这些没统计到数据的人群可能具有某方面的共性，其收入也会受到这方面的影响。 本次实验中自己收获很大，特别是学会了从不同的方面去评价一个算法的性能的方式的分析方法。此外，对编程也有一些新的启发，在编程时需要注意面向对象编程，考虑到各种可能的变化，本次实验中的贝叶斯分类器的实现方法我参考了【参考资料1 使用python编写朴素贝叶斯分类器】一文的实现方式，这种实现可以达到一种自适应的状态，不论特征值有多少个，是什么类型的数据，只要给出参数，均可对其进行训练和分类，这就方便了我们进行不同的特征值对分类效果的影响分析时的测试，只需要对测试文件和训练文件做对应修改即可。此外，在实现过程中设置了很多参数，可以方便进行训练数据比例，是否随机选取，特征值分割粒度，是否进行拉普拉斯平滑处理等进行设置，极大地方便了测试和分析。 参考资料 使用Python编写朴素贝叶斯分类器 https://dataminingguide.books.yourtion.com/chapter-6/chapter-6-6.html Dataset: Adult (R) http://scg.sdsu.edu/dataset-adult_r/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[搜索引擎性能评价实验]]></title>
      <url>%2F2017%2F03%2F18%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7%E5%AE%9E%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[实验步骤 自由分组， 至多2人一组 构建查询样例集合：利用网络资源(http://top.baidu.com/; http://top.sogou.com/等) 和个人使用经验构建查询样例集合，查询样例集合需覆盖不同查询热门程度（ 冷门/热门） 和各种类型的用户查询需求（ 导航类/信息类/事务类），样例集合的规模为10个查询，各类比例为2:5:3， 并根据个人经验，撰写每个查询样例的信息需求内容。 构建Pooling：学生根据其构建的查询样例集合，抓取常用的三个中文搜索引擎(百度、360好搜、 搜狗)对这部分查询词的查询结果，每个搜索引擎抓取查询结果的前十位结果，并利用这些结果 构建Pooling。 构建相关性标注集合：根据步骤2中撰写好的信息需求，对Pooling里的结果进行标注，标注为 “ 答案” 和“ 非答案” 两类即可。 根据标注结果，依据MAP，P@10，MRR等评价指标对各个搜索引擎的查询性能进行评价，并对 搜索引擎满足不同信息需求的情况加以比较，每人各自撰写实验报告。 查询样例集合创建 导航类 丝芙兰官网（热门） 河海大学主页（冷门） 信息类 萨德(热门), 美对朝忍耐到尽头(热门)，红薯 地瓜（冷门），青铜器制作流程（冷门）, 烟草学专业(冷门) 事务类 NBA直播(热门)， 金刚狼3下载（热门），张家界联想笔记本维修（冷门） 查询样例信息需求 丝芙兰官网（热门）：找到丝芙兰官网，查看产品信息，功效，购买方式等等 河海大学主页（冷门）：找到河海大学的校园主页 萨德：关于萨德的最新新闻，以及事件经历 美对朝忍耐到尽头：相关的新闻 红薯 地瓜：红薯与地瓜是否是同一种事物，各地有什么区别 青铜器制作流程：直接给出青铜器的制作方法 烟草学专业：查询专业简介，需要给出专业学习内容，就业方向，相关学校 NBA直播：最新NBA赛事直播，比分情况，赛况解说等 金刚狼3下载：给出电影的下载链接或者在线观看链接 张家界联想笔记本维修：给出维修点，联系方式等 构建pooling 针对三个搜索引擎分别抓取对应搜索数据，并进行标记，抓取结果及Pooling标记结果见【统计数据.xls】 性能指标计算 首先需要明确性能指标的计算方法 平均准确率（AP）： \[AP=\frac{1}{N}\sum_{i=1}^NPrecision(i)\] MAP MAP方法是Mean Average Precison，即平均准确率法的简称。其定义是求每个相关文档检索出后的准确率的平均值（即Average Precision）的算术平均值（Mean），即 \[MAP = mean(AP)\] RR 首位相关结果倒数RR,即出现第一个相关性标注的排序的倒数 \[RR = \frac{1}{Rank(1)}\] MRR MRR是平均排序倒数（Mean Reciprocal Rank）的简称，MRR方法主要用于寻址类检索（Navigational Search）或问答类检索（Question Answering）,MRR方法首先计算每一个查询的第一个相关文档位置的倒数，然后将所有倒数值求平均。 P@N P@N本身是Precision@N的简称，指的是对特定的查询，考虑位置因素，检测前N条结果的准确率 基于此，计算各词条的RR,P@10，AP，以及对搜索引擎的MRR,MAP，P@10结果如下： 分词条结果 进一步统计各个搜索引擎对不同类型的关键词的搜索结果性能： 各搜索引擎不同类别的统计结果 实验结论 按照统计结果做出各项指标的柱状图如下： MAP MP@10 MRR 总体的数据 由统计结果分析，从总体来看，在各项指标中，百度是三个搜索引擎中表现最好的,360的性能次之，而搜狗的结果则稍差一些。 导航类搜索词 对于导航类搜索关键词，RR一般用作评价导航类的查询需求，用于表示用户在知道目标前需要浏览的结果数目，可以看到，三大搜索引擎的导航类关键词的MRR指标均为1，可以发现，当用户想要搜索的信息为已知资源，主页，资源等信息时，搜索引擎可能会更倾向于返回给用户一些官方的主页信息，以使用户能够尽快找到目标，对于导航类信息的其他指标，相差也不大，但是P@10的指标值相差比较大，百度的P@10值是较好的，而360和搜狗的结果则稍差，查看原始搜索结果标记，三大搜索引擎都加入了对应的百科，问答平台，而搜狗和360的结果还夹杂了不少“同名的广告”，以“河海大学主页”词条为例，360和搜狗的结果中有不少标题虽是“河海大学招生网”等信息，但实际是一些培训机构的页面，两家的搜索引擎并没有做这方面的剔除，使得结果首页多了不少奇怪的“广告”，影响了搜索体验。另一个比较有趣的现象是，河海大学离退休工作处官网的名称是“河海大学主页”，这个页面在三大搜索引擎的结果中排第2、3位，可见搜索引擎背后会根据用户的点击数据调整结果的显示顺序。 信息类搜索词 信息类数据是用户搜索需求中占比最大的，用户的关注点在于结果的全面和权威性，对于这类搜索词，搜索引擎多数会给出其问答平台的结果，相关新闻结果，或者百科结果。对于信息类关键词，P@10是评价其搜索性能的较好指标，百度的数据在70%左右，而360和搜狗在60%左右，可见在中文搜索中，百度的确做得比较好，对于大多数信息类搜索词，百度的结果足够全面。对于新闻类的信息，三大搜索引擎结果差别并不是特别大，但是对于一些知识类信息，或者生活类信息的搜索，360和搜狗的表现则差强人意，以“红薯 地瓜”关键词为例，用户的搜索需求是查询红薯地瓜的区别，百度的结果大体上与之相符，而搜狗和360除了少数两三条结果与之相关，多数结果只与红薯有关，可以推测是由于搜索引擎的分词和联合搜索系统的处理方式的差异。 事务类搜索词 事物类搜索词中，百度的结果优势不是那么明显，甚至略差，360的结果则稍微更好一些， 这里差异较大的词条是金刚狼3下载这个搜索词条，其实这个词条是一个坑，一般来说这类资源可能在互联网上很少甚至不存在，因此很多数据可能其实是广告或者一些死链接，这时可能更需要搜索引擎去剔除一些不必要的结果以帮助用户完成其任务需求，360的结果大多数是迅雷的链接，而百度的结果则包含了各种不同的站点，这些站点大多数是广告等非用户目标站点，可能是出于广告费等方面的考虑吧，使得其结果表现并不好。 冷热门 对于热门数据，三大搜索引擎的表现都比较好，冷门数据百度表现依然较好，而360和搜狗的性能则有所下降，一方面可能是由于百度的市场占有率更大，用户更多，能够获取到的用户数据也更多更全面，即使是冷门搜索词由于有较大的用户基数也能得到较好地反馈结果，另一方面，百度的数据抓取可能更全面，对于不同类别的搜索词，百度的P@10指标均能达到近70%，可见其数据是比较齐全的，这也给其冷门搜索词的搜索提供的数据。 总结 从各方面的分析可以看出，百度的性能的确是最好的，分析推测其原因如下：百度的实力更强，硬件资源，软件资源均遥遥领先于其他两家搜索引擎，这就使得百度可以拿到更多的数据，拿到更全面的数据，这会对搜索引擎性能有较大的影响；此外，百度的用户群体更大，丰富的用户数据可以帮助百度动态优化其搜索结果的排序，进而提升用户体验；百度的分词和检索算法可能更优，正如前面提到的“地瓜 红薯”词条，百度的结果是两个词的联合结果，而360和搜狗的结果可能只与其中一个有关。对于搜狗来说，其搜索结果中有时总是会有微信或者知乎的结果，当用户的意图并不在此时，可能会极大地影响其体验。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CCF2016]]></title>
      <url>%2F2017%2F03%2F16%2F%E7%AE%97%E6%B3%95%2FCCF2016%2F</url>
      <content type="text"><![CDATA[2016年CCF真题练习 Mac 下C++的编译 gcc -o target source.cpp -lstdc++ 2016-12 第一题 中间数 试题名称： 中间数 时间限制： 1.0s 内存限制： 256.0MB 12345678910111213141516171819202122232425262728293031问题描述 在一个整数序列a1, a2, …, an中，如果存在某个数，大于它的整数数量等于小于它的整数数量，则称其为中间数。在一个序列中，可能存在多个下标不相同的中间数，这些中间数的值是相同的。 给定一个整数序列，请找出这个整数序列的中间数的值。输入格式 输入的第一行包含了一个整数n，表示整数序列中数的个数。 第二行包含n个正整数，依次表示a1, a2, …, an。输出格式 如果约定序列的中间数存在，则输出中间数的值，否则输出-1表示不存在中间数。样例输入62 6 5 6 3 5样例输出5样例说明 比5小的数有2个，比5大的数也有2个。样例输入43 4 6 7样例输出-1样例说明 在序列中的4个数都不满足中间数的定义。样例输入53 4 6 6 7样例输出-1样例说明 在序列中的5个数都不满足中间数的定义。评测用例规模与约定 对于所有评测用例，1 ≤ n ≤ 1000，1 ≤ ai ≤ 1000。 思路：调用库函数进行排序，然后从中间向两侧进行查找 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt; #include &lt;cstring&gt; #include &lt;algorithm&gt;using namespace std;int a[1002];int main(int argc, char const *argv[])&#123; /* code */ int n = 0; cin &gt;&gt; n; for(int i = 0; i &lt; n; ++i) &#123; cin&gt;&gt;a[i]; &#125; sort(a, a+ n); int min = n/2; int max = n/2; // 一开始这里的设置是错的 for(int i = n/2; i&lt; n; ++i) &#123; if(a[n/2] &lt; a[i]) &#123; max = i; break; &#125; &#125; for(int i = n/2; i&gt;=0; --i) &#123; if(a[n/2] &gt; a[i]) &#123; min = i; break; &#125; &#125; if(n-1-max+1 == min + 1 || (max ==n/2 &amp;&amp; min ==n/2) ) &#123; cout &lt;&lt; a[n/2]&lt;&lt;"\n"; &#125; else &#123; cout&lt;&lt; -1&lt;&lt;"\n"; &#125; return 0;&#125; 2016-12第二题 工资计算 试题编号： 201612-2 试题名称： 工资计算 时间限制： 1.0s 内存限制： 256.0MB 12345678910111213141516171819202122问题描述 小明的公司每个月给小明发工资，而小明拿到的工资为交完个人所得税之后的工资。假设他一个月的税前工资（扣除五险一金后、未扣税前的工资）为S元，则他应交的个人所得税按如下公式计算： 1） 个人所得税起征点为3500元，若S不超过3500，则不交税，3500元以上的部分才计算个人所得税，令A=S-3500元； 2） A中不超过1500元的部分，税率3%； 3） A中超过1500元未超过4500元的部分，税率10%； 4） A中超过4500元未超过9000元的部分，税率20%； 5） A中超过9000元未超过35000元的部分，税率25%； 6） A中超过35000元未超过55000元的部分，税率30%； 7） A中超过55000元未超过80000元的部分，税率35%； 8） A中超过80000元的部分，税率45%； 例如，如果小明的税前工资为10000元，则A=10000-3500=6500元，其中不超过1500元部分应缴税1500×3%=45元，超过1500元不超过4500元部分应缴税(4500-1500)×10%=300元，超过4500元部分应缴税(6500-4500)×20%=400元。总共缴税745元，税后所得为9255元。 已知小明这个月税后所得为T元，请问他的税前工资S是多少元。输入格式 输入的第一行包含一个整数T，表示小明的税后所得。所有评测数据保证小明的税前工资为一个整百的数。输出格式 输出一个整数S，表示小明的税前工资。样例输入9255样例输出10000评测用例规模与约定 对于所有评测用例，1 ≤ T ≤ 100000。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IPv6协议转发实验]]></title>
      <url>%2F2017%2F03%2F16%2F%E7%BD%91%E7%BB%9C%2FIPv6%E5%8D%8F%E8%AE%AE%E8%BD%AC%E5%8F%91%E5%AE%9E%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[p{ text-indent: 2em; } 实验目的 通过前面的实验，我们已经深入了解了 IPv6 协议的分组接收和发送处理流程。本实验需要将实验模块的角色定位从通信两端的主机转移到作为中间节点的路由器上，在 IPv6 分组收发处理的基础上，实现分组的路由转发功能。 网络层协议最为关注的是如何将 IPv6 分组从源主机通过网络送达目的主机，这个任务就是由路由器中的 IPv6协议模块所承担。路由器根据自身所获得的路由信息，将收到的 IPv6分组转发给正确的下一跳路由器。如此逐跳地对分组进行转发，直至该分组抵达目的主机。 IPv6 分组转发是路由器最为重要的功能。 本实验设计实现路由器中的 IPv6 协议，可以在原有 IPv6 分组收发实验的基础上，增加 IPv6 分组的转发功能。对网络的观察视角由主机转移到路由器中，了解路由器是如何为分组选择路由，并逐跳地将分组发送到目的端的。 大家在本实验中也会初步接触路由表这一重要的数据结构，认识路由器是如何根据路由表对分组进行转发的。 实验具体任务 对于每一个到达本机的 IPv6 分组，根据其目的 IPv6 地址查找本机的路由表，对该分组进行如下的几类操作： 丢弃查不到路由的分组； 向上层协议上交目的地址为本机地址的分组； 根据路由查找结果，向相应接口转发其余的分组。 实验内容 实验内容主要包括： 设计路由表数据结构：设计路由表所采用的数据结构。要求能够根据 IPv6 地址来确定分组处理行为（丢弃、 上交或转发），转发情况下需获得下一跳的 IPv6 地址。路由表的数据结构和查找算法会极大的影响路由器的转发性能，有兴趣的同学可以深入思考和探索。 IPv6 分组的接收和发送：对前面实验中所完成的代码进行修改，在路由器协议栈的 IPv6 模块中能够正确完成分组的接收和发送处理。具体要求不做改变，参见IPv6 分组收发实验。 IPv6 分组的转发：对于需要转发的分组进行处理，获得下一跳的 IP 地址，然后调用发送接口函数进一步处理。 实验说明： 具体实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596/** THIS FILE IS FOR IPv6 FORWARD TEST*/// system support#include "sysinclude.h"extern void ipv6_fwd_DiscardPkt(char *pBuffer, int type);/*参数： pBuffer：指向被丢弃的报文 type：表示错误类型，包括 TTL 错误和找不到路由两种错误，定义如下： # define STUD_IPV6_FORWARD_TEST_HOPLIMIT_ERROR #define STUD_IPV6_FORWARD_TEST_NOROUTE说明： 本函数是丢弃分组的函数，在接收流程中检查到错误时调用此函数将分组丢弃*/extern void ipv6_fwd_SendtoLower(char *pBuffer, int length, ipv6_addr *nexthop);/*参数： pBuffer：指向所要发送的 IPv6 分组的起始地址，指向数据为网络字节序，是从ipv6头开始的 length：分组的整个长度（包括分组头部） nexthop：为转发处理时下一跳的地址。说明： 本函数是发送流程的下层接口函数，在 IPv6 协议模块完成发送封装工作后调用该接口函数进行后续发送处理。*/extern void getIpv6Address(ipv6_addr *pAddr);/*本函数用于获取本机的 IPv6地址，该函数即可返回本机的 IPv6地址pAddr：返回的 IPv6 地址结构的指针*/extern void ipv6_fwd_LocalRcv(char *pBuffer, int length);// 分组上交函数，在对 IPv6 的分组完成解析处理之后，如果分组的目的地址是本机的地址，则调用本函数将正确分组提交上层相应协议模块进一步处理。// 自定义路由表数据结构struct Router&#123; ipv6_addr dest; // 目的地址 UINT32 masklen; // 掩码长度 ipv6_addr nexthop;// 下一跳 struct Router *next;// 链表下一个节点 &#125;RouterTables;// 链表的head和创建的新节点的位置RouterTables *head = null;RouterTables *p = null;void stud_ipv6_Route_Init()&#123; /* 本函数用于对路由表进行初始化，在系统初始化的时候将调用该函数，对学生自己写的路由表数据结构进行初始化操作。 */ return;&#125;void stud_ipv6_route_add(stud_ipv6_route_msg *proute)&#123; /* 参数： proute：需要添加的路由，其数据结构 stud_ipv6_route_msg 的定义如下： typedef stud_route_msg &#123; ipv6_addr dest; // 地址段 UINT32 masklen; // ipv6_addr nexthop;//下一跳地址 &#125; stud_ipv6_route_msg; 说明： 本函数为路由表配置接口，系统在配置路由表时需要调用此接口。此函数功能为向路由表中增加一个新的表项，将参数所传递的路由信息添加到路由表中。 */ RouterTables * newRouter = new Router(); newRouter-&gt;dest return;&#125;int stud_ipv6_fwd_deal(char *pBuffer, int length)&#123; /* 接收函数，实现分组接收处理.根据分组中 参数： pBuffer ：指向所及受到的 IPv6 分组头部 length：为 IPv6 分组的长度 返回值： 处理该包的返回值， 0 为成功， 1 为失败； 说明： 本函数是 IPv6 协议接收流程的下层接口函数，实验系统从网络中接收 到分组后会调用本函数。调用该函数之前已完成 IPv6 报文的合法性检查 */ // a.判定是否为本机接收的分组，如果是则调用 ipv6_fwd_LocalRcv( )； // b. 按照最长匹配查找路由表获取下一跳，查找失败则调用ipv6_fwd_DiscardPkt( )； // c. 需要转发，hop limit - 1 ,调用 ipv6_fwd_SendtoLower( )完成报文发送； return 0;&#125; 本实验中需要注意的几个问题是： IPV6地址结构体的定义 IPv6转发实验没有给出ipv6_addr结构体的定义，而比较地址时需要 广播地址也需要上交分组 最后一跳时需要将分组直接转发给目的主机]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux/Mac 常用命令]]></title>
      <url>%2F2017%2F03%2F15%2Flinux-Mac-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[使用pandoc将markdown输出为pdf pandoc的安装与配置 1234567891011121314151617181920212223242526272829303132333435pandoc hello-world.md -o out.pdf --latex-engine=xelatexpandoc -D latex &gt; mytemplate.tex# 如果提示pandoc无法找到插件xelatex（支持输出中文），则下载Tex，BasicTexpandoc hello-world.md -o out.pdf --latex-engine=/Library/TeX/texbin/xelatex# tips：可以将该路径加入$PATH# 指定中英文字体pandoc -N -s --toc --smart --latex-engine=xelatex -V CJKmainfont='Kai' -V mainfont='Monaco' -V geometry:margin=1in hello-world.md -o output.pdfpandoc -N -s --toc --smart -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --variable fontsize=26pt --latex-engine=xelatex -V geometry:margin=1in IPv6协议转发实验.md -o example14.pdfpandoc -N -s --toc --smart --template default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in 搜索引擎性能评价实验.md -o 搜索引擎性能评价实验.pdf# 有代码高亮pandoc -N -s --toc --smart --template default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in linux-Mac-常用命令.md -o 搜索引擎性能评价实验.pdf --listings -H code.texpandoc -N -s --toc --smart --template default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H code.tex linux-Mac-常用命令.md -o 搜索引擎性能评价实验.pdfpandoc -N -s --toc --smart --template default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H code.tex 机器学习实验-朴素贝叶斯分类器.md -o 朴素贝叶斯.pdfpandoc -s --smart --template default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H code.tex OS-lec9-exercise.md -o lec9.pdfpandoc -s --smart --template ../default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H ../code.tex 密码学-Exercise1.md -o out.pdfpandoc -s -N --toc --smart --template ../default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H ../code.tex 搜索引擎性能评价实验.md -o 实验报告.docxpandoc -s -N --toc --smart --template ../default.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H ../code.tex 感想.md -o 艺术考察报告.pdfpandoc -s -N --toc --smart --template mytemplate.tex -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H ../code.tex 感想.md -o 艺术考察报告.pdfpandoc -s -N --toc --smart -V CJKmainfont='Songti SC' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --latex-engine=xelatex -V geometry:margin=1in --listings -H code.tex 感想.md -o 艺术考察报告.pdf Mac 下的中文字体集 12345678910宋体仿宋 STFangsong宋体黑体 STHei宋体简体 Songti SC PingFang SC LingWai SC LiSong Pro LiHei Pro Libian SC Lantinghei TC Kaiti SC PDF with numbered sections and a custom LaTeX header 123pandoc -N --template=mytemplate.tex --variable mainfont="Palatino" --variable sansfont="Helvetica" --variable monofont="Menlo" --variable fontsize=12pt --variable version=1.17.2 MANUAL.txt --latex-engine=xelatex --toc -o example14.pdfpandoc -N -s --toc --smart -V CJKmainfont='Kai' -V mainfont='Monaco' --variable sansfont="Monaco" --variable monofont="Monaco" --variable fontsize=26pt --latex-engine=xelatex -V geometry:margin=1in hello-world.md -o example14.pdf Unix/Linux 系统下修改环境变量 123sudo vi .bash_profile# 添加需要增加的环境变量PATH=$PATH:/Library/TeX/texbin/ 然后重新启动terminal即可 sublime 快捷键插入自定义字符串 Preference-&gt; Key Bingding-&gt; 修改user settings 在其中加入自定义快捷键 123456&#123; "keys": ["alt+r"], "command": "insert_snippet", "args": &#123; "contents": "&lt;font color=red&gt;$&#123;1:&#125;$SELECTION&lt;/font&gt;$&#123;0&#125;" &#125; &#125;, 其中光标所在位置为${1:}$SELECTION所在地 树莓派开机自启动脚本 12345678910111213141516171819202122232425#!/bin/sh### BEGIN INIT INFO# Provides: auto_start# Required-Start: $remote_fs# Required-Stop: $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start or stop the HTTP Proxy.### END INIT INFOcase $1 in start) # svnserve -d -r /home/pi/svn_repository python /home/pi/Documents/tips/auto_login.py python /home/pi/Documents/tips/start_note.py python /home/pi/Documents/tips/baidu_weather.py php5 /home/pi/Documents/tips/bind_dns/bind.php pi php5 /home/pi/Documents/tips/bind_dns/bind.php survey ;; stop) killall svnserve ;;*)echo "Usage: $0 (start|stop)";;esac 注：本意是想写一个可以开机自启动的脚本，脚本的目的是登录校园网，然后将本机的IP地址更新到自己的域名中，向linux机器添加开机自启动脚本的方法为： 123456789# 在/etc/init.d/文件夹下添加新的启动脚本，格式参考上面，注意需要加入BEGIN INIT INFO那一段注释，否则在加入启动项时会出现LSB不存在的errorsudo chmod +x 775 name# 给脚本足够运行权限sudo update-rc.d name defaults 95# 将自启动脚本name添加到自启动表项中，启动顺序为95，注意，需要使用网络的脚本顺序要大于90sudo update-rc.d -f name remove# 移除自启动项name 这样既可开机自启动该脚本了 但是在实际运行中发现并不能实现自动的登录以及域名解析的更新，分析了之后发现该脚本启动时间太早，机器还没有分到ip地址，无法完成网络请求，于是将该脚本加入到了/etc/rc.local自启动脚本中，linux系统的脚本启动顺序为： 123456/etc/init.d/ # init.d目录包含许多系统各种服务的启动和停止脚本。/etc/rc.local# 脚本是在系统初始化级别脚本运行之后再执行的，# 因此可以安全地在里面添加你想在系统启动之后执行的脚本。 在rc.local文件中，exit 0之前加入我们的启动脚本 为了保证可以联网，我们在脚本中设置了一个死循环，重复登录直到登录成功 12345678910111213141516while True: try: f = urllib2.urlopen(url, post_data) # `这里完成了向登录页面发送登录POST请求的操作，只有这一步成功完成之后才能进行下一步的绑定域名脚本的执行，如果尚未分配到ip则会进入异常处理等待5秒继续尝试登录` content = f.read() # print content result=urllib.urlopen('http://baidu.com').read() print result print os.popen('sh /home/pi/Documents/bind.sh').read() # 在python中执行shell脚本的方法，这个函数可以输出脚本的输出信息 print "Network is Ready!" break except Exception , e: print e print "Network is not ready,Sleep 5s..." time.sleep(5) python 调用命令行 os.popen这种调用方法可以输出脚本的输出信息,推荐使用 12import osos.popen('sh /home/pi/Documents/bind.sh').read() os.system 会输出一些奇怪的东西 12import osos.system("echo \"Hello World\"") 查看应用安装位置 12345# 查看运行文件所在处which hexo# 查看应用安装位置whereis hexo git 相关 git status 中文乱码问题: git config --global core.quotepath false git gitignore 不起作用: 1234git rm -r --cached .git add .git commit -m 'update .gitignore'git push -u origin master Mac 下鼠标设置 defaults read -g com.apple.mouse.scaling defaults write -g com.apple.mouse.scaling 7 mac GCC 问题 12ld: symbol(s) not found for architecture i386clang: error: linker command failed with exit code 1 (use -v to see invocation) 使用标准c库 1gcc -o run hw3a.cpp -lstdc++]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[计算机系统结构]指令系统]]></title>
      <url>%2F2017%2F03%2F15%2F%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F%2F</url>
      <content type="text"><![CDATA[指令系统，寻址方式，内存映射，大端小端，哈夫曼编码，单地址指令，两地址指令 \[\sum_{i=1}^n a_i=0\] 计算机系统的性能评价 时钟频率 指令执行速度 一种经典的表示运算速度的方法 MIPS(Million Instructions Per Second), GIPS, TIPS \[MIPS = \frac{指令条数}{执行时间\times 10^6} = \frac{Fz}{CPI} = IPC \times Fz\] 其中: Fz为处理机的工作主频 CPI(Cycles Per Instruction)为每条指令所需的平均时钟周期数 IPC(Instruction Per Cycle)为每个时钟周期平均执行的指令条数 平均速度 核心程序法 峰值速度]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[密码学]古典密码]]></title>
      <url>%2F2017%2F03%2F14%2F%E5%AF%86%E7%A0%81%E5%AD%A6%2F%E5%AF%86%E7%A0%81%E5%AD%A6-%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%2F</url>
      <content type="text"><![CDATA[Description：移位密码，凯撒密码，置换密码 移位密码： 加密:ci= (pi+K) mod 26 解密:pi= (ci-K) mod 26 123密钥：整数， 1≤K ≤25 (26个英文字母)加密：明文P中的每个字母被它之后的第K个字母替代解密：密文C中的每个字母被它之前的第K个字母替代 凯撒密码 1当 K=3时，该密码体制成为凯撒密码(Caesar Cipher) 在古罗马的战争(公元前54年)中使用 置换密码 Lecture 2 置换密码（ Permutation Cipher）：保持明文的所有字母不变，只是利用置换打乱了明 文字母的位置和次序；对明文字符的位置进行重新排列的一种密码。 也称易位密码、换位密码、移位密码 m = n, 把明文每m个分割，然后按照\(\pi(x)\)的对应关系，调整明文顺序，形成密文，解密时反向进行即可 代换密码 Lecture 2 密钥K是所有的26个数字0,1,2…,25的一个置换， 即 – 加密： \(c_i=S(p_i)\) – 解密： \(p_i=S^{-1}(c_i)\) 安全性分析：暴力搜索所有的密钥不可行 \[26! = 4*10^{26} = 2^{88.4}\] (公元前一千年内) 元9世界， 阿拉伯科学家al-Kindi发明代换密码频率分析， 分析单个英文字母出现频率，两个连续字母出现的概率 代换密码频率分析步骤 统计密文单词频率，与英文字母表中字母频率进行比较 维吉尼亚密码 加密 掩盖了加密后的字母统计概率（多表替换） 使用多个移位密码(shift cipher) 维吉尼亚密码 123明文: A T T A C K A T D A W N密钥: L E M O N L E M O N L E密文: L X F O PV E F R N H R 解密； 分析方法 – 密钥空间大小为26m，若m很大，使用计算机穷尽密钥搜索也需要很长时间 – 寻找密钥长度，将问题变成简单的移位密码 如何寻找m ？ – 两种方法 • Kasiski测试法， 1863 • 重合指数法分析， 1920 Kasiski test（ 卡西斯基测试） – 基于以下事实 • 两段相同的明文段将被加密成相同的密文段，则他们的位置间距为m的倍数 – 算法 • 搜索长度至少为3的相同的密文段 • 记下离起始密码段的距离d1,d2,d3… • 则m整除gcd(d1,d2,d3…) 重合指数法（ Index of coincidence） – 定义：设x=x1x2x3…,xn是一条长度为n的串， x的重合指数Ic(x)定义为x中两个随机元素相同的 概率 重合指数法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[[搜索引擎]性能评价]]></title>
      <url>%2F2017%2F03%2F14%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7%2F</url>
      <content type="text"><![CDATA[搜索引擎性能评价的目的 对用户而言： 信息获取渠道 对搜索引擎广告商而言 对搜索技术研究人员而言 对搜索引擎服务提供者 从较差查询样例中学习 链接锚本重定向问题 清华美院 团、派 搜索引擎性能评价流程 1.1 搜索引擎性能评价的对象 网络服务提供商的属性 市场占用率、 网络信息检索工具属性 网络数据环境、用户群体 搜索引擎运行效果 响应时间 耗费的硬件资源 是否满足用户的信息需求 用户获取信息耗费的时间成本？ 根据用户的需求调整响应时间和查询质量？ 1.2 搜索引擎性能评价的Cranfield体系 黑箱评价方式：给定标准输入情况下，看系统输出与标准输出的差异 输入:语料库，查询样例、相关性标注 优势：复用性（一次标注，多次使用） 语料库采集 信息检索系统：提供固定的语料库集合，集合规模适当，数据质量可靠 商业搜索引擎：不提供固定的语料库集合，评价数据抓取子系统性能 查询样例集合构建 用户查询规模庞大 核心问题：如何采样：真实性，精确性，全面性 查询采样的真实性：反映用户实际需求 来源：用户查询日志行为（日志隐私保护）、公开数据资源 查询采样的精确性：减少数据标注困难 查询采样的全面性：综合评价各方面性能 少量查询样例代表大多数需求 采样依据：内容类别、热门程度、需求类型 查询信息需求决定了用户使用搜索引擎的满意度，数据环境复杂用户意图难以琢磨 搜索引擎用户信息需求分布： 导航类：查询某个已知存在的资源，页面 主页，考试资源等等 信息类：查询与某个主题相关的关键信息资源 获取相关信息，没有确定查询目标， 香港股市，，， 事务类：查找与完成某个特定任务相关的资源 垂直搜索引擎服务对象 如：xxx下载， 保证采样全面性：查询热门程度（冷热保证） 查询信息需求（2：5：3） 结果相关性标注 内容相关≠关键资源 相关性结果的共性要求： 结果提供的学习时新、真实可靠 结果的标题和摘要应当方便阅读并有效引导用户阅读 以信息需求类别为指导 Pooling 方法 文本语料=》查询样例集 》 手工相关性标注 准确率/召回率 准确率：找到的是否准确 召回率：找到的是否全面 信息检索强调序列的关系 搜索引擎性能指标设计 AP：平均准确率 搜索引擎用户行为的特殊性 前10个结果（85%） 搜索引擎用户信息需求的差异性 • 导航类信息需求的用户仅关注特定检索目标 • 信息类信息需求的用户关注全面而权威的信息 • 事务类信息需求的用户关注自己的任务是否可以顺利完成。 指标 适用 描述 RR 导航类 用户在找到搜索目标前需要浏览多少结果 P@N 信息类 结果列表中多大比例信息能够满足用户需求？ MAP 反映系统在全部相关文档上性能的单值指标。系统检索出来的相关文档越靠前(rank 越高)，MAP就应该越高 前n位成功率 事务类 用户是否能够利用给出的结果完成自己所关注的事务 首位相关结果倒数(Reciprocal Rank) \[RR = \frac{1}{Rank(1)}\] 适用于导航类型的查询信息需求（ 用户在找到搜索目标前需要浏览多少结果？ ） 前N位准确率(Precision@N) 适用于信息类型的查询信息需求（ 结果列表中多大比例信息能够满足用户需求？ ） 前N位成功率(Success@N) 适用于事务类型的查询信息需求（ 用户是否能够利用给出的结果完成自己所关注的事务？ ） 其他 NDCG@N: • Normalized Discounted Cumulative Gain • 对结果进行多级相关性标注时适用 • ERR: Expected Reciprocal Rank • Supported by Yahoo! and Google • 可以获取用户行为数据时适用 • B-pref: Binary preference • 相关性标注不完整时适用 P@N的计算方法 P@N本身是Precision@N的简称，指的是对特定的查询，考虑位置因素，检测前N条结果的准确率。例如对单次搜索的结果中前5篇，如果有4篇为相关文档，则P@5 = 4/5 = 0.8 。 测试通常会使用一个查询集合（按照前文所述方法构造），包含若干条不同的查询词，在实际使用P@N进行评估时，通常使用所有查询的P@N数据，计算算术平均值，用来评判该系统的整体搜索结果质量。 N的选取 对用户来说，通常只关注搜索结果最前若干条结果，因此通常搜索引擎的效果评估只关注前5、或者前3结果，所以我们常用的N取值为P@3或P@5等。 对一些特定类型的查询应用，如寻址类的查询（Navigational Search），由于目标结果极为明确，因此在评估时，会选择N=1（即使用P@1）。举个例子来说，搜索“新浪网”、或“新浪首页”，如果首条结果不是 新浪网（url：www.sina.com.cn），则直接判该次查询精度不满足需求，即P@1=0 MRR 平均倒数排序 MRR是平均排序倒数（Mean Reciprocal Rank）的简称，MRR方法主要用于寻址类检索（Navigational Search）或问答类检索（Question Answering），这些检索方法只需要一个相关文档，对召回率不敏感，而是更关注搜索引擎检索到的相关文档是否排在结果列表的前面。 MRR方法首先计算每一个查询的第一个相关文档位置的倒数，然后将所有倒数值求平均。 MRR 上述的P@N方法，易于计算和理解。但细心的读者一定会发现问题，就是在前N结果中，排序第1位和第N位的结果，对准确率的影响是一样的。但实际情况是，搜索引擎的评价是和排序位置极为相关的。即排第一的结果错误，和第10位的结果错误，其严重程度有天壤之别。因此在评价系统中，需要引入位置这个因素。 MRR是平均排序倒数（Mean Reciprocal Rank）的简称，MRR方法主要用于寻址类检索（Navigational Search）或问答类检索（Question Answering），这些检索方法只需要一个相关文档，对召回率不敏感，而是更关注搜索引擎检索到的相关文档是否排在结果列表的前面。MRR方法首先计算每一个查询的第一个相关文档位置的倒数，然后将所有倒数值求平均。例如一个包含三个查询词的测试集，前5结果分别为： 查询一结果：1.AN 2.AR 3.AN 4.AN 5.AR 查询二结果：1.AN 2.AR 3.AR 4.AR 5.AN 查询三结果：1.AR 2.AN 3.AN 4.AN 5.AR 其中AN表示不相关结果，AR表示相关结果。那么第一个查询的排序倒数（Reciprocal Rank）RR1 = 1/2=0.5 ；第二个结果RR2 = 1/2 = 0.5 ； 注意倒数的值不变，即使查询二获得的相关结果更多。同理，RR3= 1/1 = 1。 对于这个测试集合，最终MRR=（RR1+RR2+RR3）/ 3 = 0.67 然而对大部分检索应用来说，只有一条结果无法满足需求，对这种情况，需要更合适的方法来计算效果，其中最常用的是下述MAP方法。 MAP MAP方法是Mean Average Precison，即平均准确率法的简称。其定义是求每个相关文档检索出后的准确率的平均值（即Average Precision）的算术平均值（Mean）。这里对准确率求了两次平均，因此称为Mean Average Precision。（注：没叫Average Average Precision一是因为难听，二是因为无法区分两次平均的意义） MAP 是反映系统在全部相关文档上性能的单值指标。系统检索出来的相关文档越靠前(rank 越高)，MAP就应该越高。如果系统没有返回相关文档，则准确率默认为0。 MAP:全称mean average precision(平均准确率)。mAP是为解决P，R，F-measure的单点值局限性的，同时考虑了检索效果的排名情况。 计算如下： 假设有两个主题，主题1有4个相关网页，主题2有5个相关网页。某系统对于主题1检索出4个相关网页，其rank分别为1, 2, 4, 7；对于主题2检索出3个相关网页，其rank分别为1,3,5。对于主题1，平均准确率为(1/1+2/2+3/4+4/7)/4=0.83。对于主题 2，平均准确率为(1/1+2/3+3/5+0+0)/5=0.45。则MAP=(0.83+0.45)/2=0.64。”]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>%2F2017%2F03%2F14%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy 草稿 草稿相当于很多博客都有的“私密文章”功能。 1$ hexo new draft "new draft" 会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。 如果你希望强行预览草稿，更改配置文件： 1render_drafts: true 或者，如下方式启动server： 1$ hexo server --drafts 下面这条命令可以把草稿变成文章，或者页面： 1$ hexo publish [layout] &lt;filename&gt; More info: Deployment MathJax MathJax 常用命令 mathjax 常用 推荐 手写识别 修复公式不正常 在blog文件夹中执行： 1$ hexo math install 在_config.yml文件中添加： 12plugins:- hexo-math 使用 1Simple inline $a = b + c$. 效果： Simple inline \(a = b + c\). MathJax Block: 1234$$\frac&#123;\partial u&#125;&#123;\partial t&#125;= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)$$ 效果： \[\frac{\partial u}{\partial t} = h^2 \left( \frac{\partial^2 u}{\partial x^2} + \frac{\partial^2 u}{\partial y^2} + \frac{\partial^2 u}{\partial z^2}\right)\] 为Hexo Next博客添加关键词功能 修改文件：themes\next\layout_partials\head.swig 1234567&#123;% if page.keywords %&#125; &lt;meta name="keywords" content="&#123;&#123; page.keywords &#125;&#125;" /&gt;&#123;% elif page.tags and page.tags.length %&#125; &lt;meta name="keywords" content="&#123;% for tag in page.tags %&#125;&#123;&#123; tag.name &#125;&#125;,&#123;% endfor %&#125;" /&gt;&#123;% elif theme.keywords %&#125; &lt;meta name="keywords" content="&#123;&#123; theme.keywords &#125;&#125;" /&gt;&#123;% endif %&#125; 修改内容：35行左右，将原来的设置ketwords的代码覆盖即可 1234567&#123;% if page.keywords and page.keywords.length %&#125; &lt;meta name="keywords" content="&#123;% for key in page.keywords %&#125;&#123;&#123; key &#125;&#125;,&#123;% endfor %&#125;" /&gt;&#123;% elif page.tags and page.tags.length %&#125; &lt;meta name="keywords" content="&#123;% for tag in page.tags %&#125;&#123;&#123; tag.name &#125;&#125;,&#123;% endfor %&#125;" /&gt;&#123;% elif theme.keywords %&#125; &lt;meta name="keywords" content="&#123;&#123; theme.keywords &#125;&#125;" /&gt;&#123;% endif %&#125; hexo 中设置访问密码 在themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig中的meta标签之后添加js代码 123456789101112131415161718192021222324252627282930313233&lt;script src=&quot;https://cdn.bootcss.com/js-sha1/0.4.1/sha1.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://cdn.bootcss.com/blueimp-md5/1.1.0/js/md5.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; loopy() function loopy() &#123; if(&apos;&#123;&#123; page.password &#125;&#125;&apos;)&#123; while(true) &#123; var pass = prompt(&quot;输入正确密码才能查看!&quot;); if(pass) &#123; // 点击的确定 var ss = sha1(pass) // alert(ss); if(ss == &apos;&#123;&#123; page.password &#125;&#125;&apos;) &#123; alert(&quot;欢迎进入我的博客！Contact me at zhangshenghao1995@163.com&quot;); break; &#125; else &#123; alert(&quot;密码错误！&quot;); &#125; &#125; else if(pass == &quot;&quot;) &#123; // 用户没有输入 &#125; else &#123; // 点击取消 history.back() &#125; &#125; &#125;&#125; &lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[现代密码学作业1]]></title>
      <url>%2F2017%2F03%2F14%2F%E5%AF%86%E7%A0%81%E5%AD%A6%2F%E5%AF%86%E7%A0%81%E5%AD%A6-Exercise1%2F</url>
      <content type="text"><![CDATA[1.5 使用穷尽密钥搜索方法破译如下利用移位密码加密的密文 BEEAK FYDJX UQYHY JIQRY HTYJI QFBQD UYJII KFUHC QD 解：移位密码的加解密方法为： 12加密：明文P中的每个字母被它之后的第K个字母替代解密：密文C中的每个字母被它之前的第K个字母替代 为了方便使用python编程完成遍历： 12345678import syspassword = 'BEEAK FYDJX UQYHY JIQRY HTYJI QFBQD UYJII KFUHC QD'password = password.replace(' ', '')for i in range(0, 26): print i, "\t", for word in password: sys.stdout.write(chr(((ord(word) - i) - (65-26)) % 26 + 97)) sys.stdout.write('\n') 输出结果为： 12345678910111213141516171819202122232425260 beeakfydjxuqyhyjiqryhtyjiqfbqduyjiikfuhcqd1 addzjexciwtpxgxihpqxgsxihpeapctxihhjetgbpc2 zccyidwbhvsowfwhgopwfrwhgodzobswhggidsfaob3 ybbxhcvagurnvevgfnoveqvgfncynarvgffhcrezna4 xaawgbuzftqmudufemnudpufembxmzqufeegbqdymz5 wzzvfatyespltctedlmtcotedlawlypteddfapcxly6 vyyuezsxdroksbsdcklsbnsdckzvkxosdccezobwkx7 uxxtdyrwcqnjrarcbjkramrcbjyujwnrcbbdynavjw8 twwscxqvbpmiqzqbaijqzlqbaixtivmqbaacxmzuiv9 svvrbwpuaolhpypazhipykpazhwshulpazzbwlythu10 ruuqavotznkgoxozyghoxjozygvrgtkozyyavkxsgt11 qttpzunsymjfnwnyxfgnwinyxfuqfsjnyxxzujwrfs12 pssoytmrxliemvmxwefmvhmxwetperimxwwytivqer13 orrnxslqwkhdlulwvdeluglwvdsodqhlwvvxshupdq14 nqqmwrkpvjgcktkvucdktfkvucrncpgkvuuwrgtocp15 mpplvqjouifbjsjutbcjsejutbqmbofjuttvqfsnbo16 lookupintheairitsabirditsaplaneitssuperman17 knnjtohmsgdzhqhsrzahqchsrzokzmdhsrrtodqlzm18 jmmisnglrfcygpgrqyzgpbgrqynjylcgrqqsncpkyl19 illhrmfkqebxfofqpxyfoafqpxmixkbfqpprmbojxk20 hkkgqlejpdawenepowxenzepowlhwjaepooqlaniwj21 gjjfpkdioczvdmdonvwdmydonvkgvizdonnpkzmhvi22 fiieojchnbyuclcnmuvclxcnmujfuhycnmmojylguh23 ehhdnibgmaxtbkbmltubkwbmltietgxbmllnixkftg24 dggcmhaflzwsajalkstajvalkshdsfwalkkmhwjesf25 cffblgzekyvrzizkjrsziuzkjrgcrevzkjjlgvidre 查看输出的26条结果，发现lookup in the air its a bird its a plane its superman是其中有意义的语句，相应秘钥为K=16 1.6 (a) 设\(\pi\) 为集合{1,2,\(\cdots\),8}上的置换： \(x\) 1 2 3 4 5 6 7 8 \(\pi(x)\) 4 1 6 2 7 3 8 5 求出逆置换 \(\pi^{-1}\) 解密下列使用置换密码加密的密文，密钥是\((a)\)中的\(\pi^{-1}\) \[ETEGENLMDNTNEOORDAHATECOESAHLRMI\] 解： (a). 逆置换\(\pi^{-1}\) \(x\) 1 2 3 4 5 6 7 8 \(\pi^{-1}(x)\) 2 4 6 1 8 3 5 7 (b). 解密，秘钥是\((a)\)中的\(\pi^{-1}\), 则解密时使用置换\(\pi\)进行解密，按8个字母分组，\[ETEGENLM , DNTNEOOR , DAHATECO , ESAHLRMI , \] 解密得：\[GENTLEME\ NDONOTRE\ ADEACHOT\ HERSMAIL\] 明文为：\[gentlemen\ don&#39;t\ read\ each\ others\ mail.\] 1.21 以下给出的四段密文,第一个由代换密码加密而成第二个由维吉尼亚密码加密而成,第三个由仿射密码加密而成,最后一个不知其具体的密码体制,试从密文确定其明文。要求给出清晰的分析过程,包括统计分析和进行的计算。 代换密码: 1EMGLOSUDCGDNCUSWYSFHNSFCYKDPUMLWG YICOXYSIPJCKQPKUGKMGOLICGINCGACKSNISACYKZSCKXECJCKSHYSXCGOIDPKZCNKSHICGIWYGKKG KGOLDSILKGOIUSIGLEDSPWZUGFZCCNDGY YSFUSZCNXEOJNCGYEOWEUPXEZGACGNFGLKNSACIGOIYCKXCJUCIUZCFZCCNDGYYSFEUEKUZCSOCFZC CNCIACZEJNCSHFZEJZEGMXCYHCJUMGKUCY 提示:F解密到w 解： Step1 字母频数统计: (‘C’, 37), (‘G’, 24), (‘S’, 20), (‘K’, 18), (‘I’, 15), (‘Y’, 15), (‘U’, 14), (‘N’, 13), (‘Z’, 13), (‘E’, 12), (‘O’, 10), (‘F’, 9), (‘D’, 8), (‘J’, 7), (‘L’, 7), (‘X’, 7), (‘P’, 6), (‘A’, 5), (‘H’, 5), (‘M’, 5), (‘W’, 5), (‘Q’, 1) 于是猜测：\(S(e) = C\) Step2 统计双字出现频率 [(‘CG’, 7), (‘CK’, 5), (‘CN’, 5), (‘CY’, 4), (‘CJ’, 3), (‘CI’, 3), (‘CC’, 3), (‘CF’, 2), (‘CS’, 2), (‘CO’, 1), (‘CZ’, 1), (‘CU’, 1)] [(‘ZC’, 7), (‘AC’, 5), (‘NC’, 5), (‘CC’, 3), (‘XC’, 3), (‘IC’, 3), (‘UC’, 2), (‘JC’, 2), (‘YC’, 1), (‘OC’, 1), (‘DC’, 1), (‘EC’, 1), (‘FC’, 1), (‘SC’, 1), (‘HC’, 1)] 出现次数最多的双字为CG,和ZC G可能是r,s,n,d,a中的一个，GC没有出现，故G不是r,G出现24次，频率为0.09， 假设S(a)=G Z的出现频率为 0.05， ZC(Ze)出现频率约0.02, 推测S(h)=Z SC（Se）出现1次(0.0039)，没有CS(eS),S出现20次（0.078），猜测S(o)=S AC出现5次，频率0.019， A出现频率为0.0195， 已知F解密到w，此时该字符串如下： 1EMaLOoUDeaDNeUoWYowHNoweYKDPUMLWaYIeOXYoIPJeKQPKUa KMaOLIeaINeaAeKoNIoAeYKhoeKXEeJeKoHYoXeaOIDPKheNKoHIeaIWYaKKaKaOLDoILKaOIUoI aLEDoPWhUawheeNDaYYowUoheNXEOJNeaYEOWEUPXEhaAeaNwaLKNoAeIaOI YeKXeJUeIUhewheeNDaYYowEUEKUheoOewheeNeIAehEJNeoHwhEJhEaMXeYHeJUMaKUeY wheeN出现次数较多，猜测S(l) = N 1EMaLOoUDeaDleUoWYowHloweYKDPUMLWaYIeOXYoIPJeKQPKUaKMaOLI eaIleaAeKolIoAeYKhoeKXEeJeKoHYoXeaOIDPKhelKoHIeaIWYaKKaKaOLDoILKaOIUoIaLEDoPWh UawheelDaYYowUohelXEOJleaYEOWEUPXEhaAealwaLKloAeIaOIYeK XeJUeIUhewheelDaYYowEUEKUheoOewheeleIAehEJleoHwhEJhEaMXeYHeJUMaKUeY 统计h前后的字母， [(‘wh’, 4), (‘Kh’, 2), (‘Uh’, 2), (‘Eh’, 1), (‘oh’, 1), (‘Jh’, 1), (‘Wh’, 1), (‘eh’, 1)][(‘he’, 7), (‘hE’, 3), (‘ha’, 1), (‘hU’, 1), (‘ho’, 1)] Khe出现一次，Uhe出现两次，推测S(t)=U 1EMaLOotDeaDletoWYowHloweYKDPtMLWaYIeOXYoIPJeKQPKtaKMaOLI eaIleaAeKolIoAeYKhoeKXEeJeKoHYoXeaOIDPKhelKoHIeaIWYaKKaKaOLDoILKaOItoIaLEDoPWh tawheelDaYYowtohelXEOJleaYEOWEtPXEhaAealwaLKloAeIaOIYeK XeJteIthewheelDaYYowEtEKtheoOewheeleIAehEJleoHwhEJhEaMXeYHeJtMaKteY 由wheellDaYYow ，猜测S(b) = D, S(r) = Y 由Hlower，猜测S(f) = H 由Wrow，猜测S(g)= W 由Khoe，猜测S(s) = K 由Master，猜测S(m) = M 此时文本为： 1EmaLOot be able to grow flowers bPt mLgarIeOXroIPJesQPstasmaOL IeaI leaAes olI oAer shoes XEeJesofroXeaOIbPshels of IeaI grass as aOLboILsaOItoIaLEboPght a wheelbarrow to helXEOJlearEOgEtPXEhaAealwaLs loAe IaOIresXeJteI the wheelbarrow EtEs the oOe wheel eIAehEJleofwhEJhEamXerfeJt master 由oOe，猜测，S(n) = O 由lwaAes, 猜测S(v) = A ….. 最终结果为： 1I may not be able to grow flowers, but my garden produces just as many dead leaves, old overshoes pieces of rope and bushels of dead grass as anybody’s. And today I bought a wheelbarrow to help in clearing it up. I have always loved and respected the wheelbarrow. It is the one wheeled vehicle of which I am perfect master. 维吉尼亚密码: 1KCCPKBGUFDPHQTYAVINRRTMVGRKDNBVFDETDGILTXRGUDDKOTF MBPVGEGLTGCKQRACQCWDNAWCRXIZAKFTLEWRPTYCQKYVXCHKFTPONCQQRHJVAJUWETMCMSPKQDYHJV DAHCTRLSVSKCGCZQQDZXGSFRLSWCWSJTBHAFSIASPRJAH KJRJUMVGKMITZHFPDISPZLVLGWTFPLKKEBDPGCEBSHCTJRWXBAFSPEZQNRWXCVYCGAONWDDKACKAWBBIKFTI OVKCGGHJVLNHIFFSQESVYCLACNVRWBBIREPBBVFEXOSCDYGZWPFDTKFQIYCWHJVLNHIQIBTKHJVNPIST 重合指数法确定m 1234567891011121314m= 1 Ic = 0.0408718383496 avg: 0.0408718383496m= 2 Ic = 0.0384615384615 0.047120045623 avg: 0.0427907920423m= 3 Ic = 0.0559418457649 0.0481016731017 0.0482625482625 avg: 0.050768689043m= 4 Ic = 0.0372549019608 0.0427423981641 0.0375788869765 0.0490533562823 avg: 0.0416573858459m= 5 Ic = 0.0425812115891 0.0430201931519 0.0325644504749 0.0352781546811 0.0429669832655 avg: 0.0392821986325m= 6 Ic = 0.062656641604 0.0837662337662 0.0493506493506 0.0649350649351 0.0428571428571 0.0733766233766 avg: 0.0628237259816m= 7 Ic = 0.030612244898 0.0443262411348 0.0434397163121 0.040780141844 0.0443262411348 0.0443262411348 0.040780141844 avg: 0.041227281186 m=6时，重合指数接近0.065, 进而确定m=6 密钥中各字符之间的相对位移的确定。根据确定好了的密钥长度m，分别计算各个字符不同相对位移下的重合指数，并将结果与0.065比较，从而确定各字符之间的相对位移。 密钥为: CRYPTO 明文为： 1i learned how to calculate the amount of paper needed for a room when i was at school you multiply the square foot age of the walls by the cubic contents of the floor and ceiling combined and double it you then allow half the total for openings such as windows and doors then you allow the other half for matching the pattern then you double the whole thing again to give a margin of error and then you order the paper 仿射密码: 1KQEREJEBCPPCJCRKIEACUZB KRVPKRBCIBQCARBJCVFCUPKRIOFKPACUZQE PBKRXPEIIEABDKPBCPFCDCCAFIEABDKPBCPFEQPKAZBKRHAIB KAPCCIBURCC DKDCCJCIDFUIXPAFFERBICZDFKABICBBENEFCUPJCVKABPCYDCCDPKBCOCPERKIVKSCP ICBRKIJPKABI 仿射密码的加密函数是\(S(x) = (ax+b) mod(m)\)，其中 • a和m互质。 • m是字母的数目。 此处m=26, 根据字母频率，C出现次数最多，假设S(e) = C， 即4a + b = 2,其中a与26互素， 尝试所有与26互素的数字，判定结果正确的指标采用重合指数的方式，将结果与0.065进行比较，确定正确结果。 明文为：O Canada terre de nos aieux ton front est ceint defleurons glorieux car ton bras sait porter lepee il sait porter la croix ton histoire est une epopee des plus brillants exploits et ta valeur de foi trempee protegera nos foyers et nos droits (d)未知密码: 1BNVSNSIHQCEELSSKKYERIFJKXUMBGYKAMOLJTYAVFBKVT DVBPWWRJY YLAOKYMPIQSCGDLFSRLL PROYGESEBUUALRWXM MASAZLGLEDFJBZAVVPXWICGJXASCBYEHOSNMULKCEAHTQ OKMFLEBKFXLRRFDT7XCTWBJSICBGAWDVYDHAVFJXZLBKC GJINEAHTTOEWTUHKRQVVRGZBXYIREMMASCSPBHLHJMBLR FFJELHWEYILWISTFW WYEJCMHYUYRUFSFMGESI GRL WALSIWM NUHSIMYYITCCQP2SICEHBCCMZFEGVJYOCDEMMPGHVAAUM ELCMOEHVLTIPSUYILVGFLMVWDVYDBTHFRAYISYSGKVSUU HYHGGCKTMBLRX 不妨尝试一下维吉尼亚密码密码，将其以输入用b的程序进行解密，结果为： 秘钥长度为 6 秘钥为: THEORY 明文为: 秘钥长度为 6 秘钥为: THEORY 明文为: I grew up among slow talkers men in particular who dropped words a few at a time like beans in a hill and when I got to Minneapolis where people took a lake wobegon comma to mean the end of a story I couldn’t speak a whole sentence in company and was considered not too briaht so I enrolled in a speech couqse taught by orvilles and the founder of reflexive relaxology a self hypnotic technique that enabled a person to speak up to three hundred words per minute 1.26 下面给出一种特殊的置换密码。设m,n为正整数，将明文写成一个m*n的矩阵，依次取各列构成密文。例如，设m=3,n=4，可以将明文cryptography写成 123cryptography 对应的密码是: ctaropyghpry (1) 在已知m和n的情况下，Bob如何解密密文 (2) 现在根据上面的方法，试破解下列密文：MYAMRARUYIQTENCTORAHROYWDSOYEOUARRGDERNOGW 解： （1）已知m和n时，Bob可以以间隔m, 依次取密文中的字符，组合成明文。 （2）遍历m,n的组合，结果如下： 1234567891011121314m: 1 n: 42myamraruyiqtenctorahroywdsoyeouarrgdernogwm: 2 n: 21marryqecoarydoeurgengxlzthsmsqgnvrxnzqcqnvm: 3 n: 14mmrietaodyureoxqtpmngxrdzfqfyywrappummpblum: 6 n: 7mreaduextmgrzqywapmpljfqlvolnmkuaccvomrjyrm: 7 n: 6mucoedxxsxndygmuspjnoaxknpwonkvzcjmblhlsaqm: 14 n: 3mcexsnymsjoxnwnvcmllanhwqqwznigtdihdscualjm: 21 n: 2moxxyujanovjlsnxqgzlgqigsfatopepybawiwonxc 查阅资料，发现key是142536，调整其顺序,得到 mary mary quite contrary how does your garden grow 1.29 下面给出一个由维吉尼亚密码改进的流密码。给定长度为m的密钥字(K,…,K) 通过规则 \[z_i = K_i(1\le i \le m), z_{i+m} = (z_i + 1)mod26 (i \ge 1)\]来构造密钥流序列,换句话说,每次我们使用的密钥字都使用字母后续者的模26来替代。例如,如果“SUMMER”是密钥字,我们首先用“SUMMER”来加密第一个六字母组,对下一个六字母组,使用“TVNNFS”,等等。 (a)描述一下怎样利用重合指数法来确定首次用来加密的密钥字的长度,然后找到它。 (b)通过分析下列密文来测试你的方法: 1IYMYSILONRFNCQXQJEDSHBUIBCJUZBOLFQYSCHATPEQGQ JEJNGNXZWHHGWFSUKULJQACZKKJOAAHGKEMTAFGMKVRDO PXNEHEKZNKFSKIFRQVHHOVXINPHMRTJPYWQGJWPUUVKFP OAWPMRKKQZWLQDYAZDRMLPBJKJOBWIWPSEPVVQMBCRYVC RUZAAOUMBCHDAGDIEMSZFZHALIGKEMJJJPCIWKRMLMPIN AYOFIREAOLDTH ITDVRMSE 解： (a) 分m组取时，每次需要减index 并mod 26，用生成的序列去计算其重合指数 (b) 结果如下; 1234567891011121314m= 1 Ic = 0.0402853824457 avg: 0.0402853824457m= 2 Ic = 0.0401172864188 0.0355857656937 avg: 0.0378515260562m= 3 Ic = 0.0361336946703 0.0430593194821 0.0478771454381 avg: 0.0423567198635m= 4 Ic = 0.0380750925436 0.0407191961925 0.0382513661202 0.0349726775956 avg: 0.038004583113m= 5 Ic = 0.0710204081633 0.0739795918367 0.0756802721088 0.0960884353741 0.0816326530612 avg: 0.0796802721088秘钥长度为 5秘钥为: PRIME明文为:the most famous cryptologist in history owesh is fameless to what he did than to what he said and to the sensational way in which he said it and this was most perfectly in character for herbertosborneyardley was perhaps the most engagin garticulateandtechnicoloredpersonalityinthebusiness 1.30 1.30 解：使用python解密，结果如下: 12345678910111213141516171819202122232425260 aqndwbhapnkjhwaxjyhwhanpjdjynaqjohzypzypdjobannykjoyphjdijtp1 kjqixtokwqsfoxkzfroxokqwfifrqkjfvoerwerwifvtkqqrsfvrwoficfpw2 sfjczpvsxjugvzseglvzvsjxgcgljsfgyvhlxhlxcgypsjjlugylxvgcagwx3 ugfaewyuzfmbyeuhbdyeyufzbabdfugbryodzodzabrwuffdmbrdzybakbxz4 mbgkhxrmegntrhmotirhrmgetktigmbtlrvieviektlxmggintliertkstze5 ntbsozlnhbqplonvpclolnbhpspcbntpdlychychspdznbbcqpdchlpsupeh6 qptuvedqotjwdvqywadvdqtowuwatqpwidraoraouwieqttajwiaodwumwho7 jwpmyhijvpfxiyjrxkiyijpvxmxkpjwxcilkvlkvmxchjppkfxckvixmnxov8 fxwnrocfywgzcrflzscrcfwyznzswfxzacdsydsynzaofwwsgzasycznqzvy9 gzxqlvagrxbealgdeualagxreqeuxgzekaiuriurqekvgxxubekuraeqjeyr10 bezjdykblzthkdbihmkdkbzlhjhmzbehskcmlcmljhsybzzmthsmlkhjfhrl11 thefirstdepositconsistedofonethousandandfourteenpoundsofgold12 pohgclupihwvucpavqucuphivgvqhpovmukqikqigvmlphhqwvmqiuvgbvdi13 wvobadmwcoxymawkyjmamwocybyjowvynmsjcsjcbyndwoojxynjcmybtyic14 xyvtkinxavzrnkxsrfnknxvartrfvxyrqnufaufatrqixvvfzrqfanrtprca15 zrypscqzkyelqszulgqsqzyklplgyzrljqmgkmgkpljczyygeljgkqlpwlak16 elrwuajesrhdjuemdbjujersdwdbreldfjnbsnbswdfaerrbhdfbsjdwxdks17 hdlxmkfhuloifmhnitfmfhluixitlhdigfqtuqtuxigkhlltoigtufixzisu18 oidznsgomdvcgnoqcpgngodmczcpdoicbgjpmjpmzcbsoddpvcbpmgczecum19 vciequbvniyabqvjawbqbvinaeawivcatbfwnfwneatuviiwyatwnbaehamn20 yachjmtyqcrktjyfkxtjtycqkhkxcyakptgxqgxqhkpmyccxrkpxqtkhoknq21 rkaofnprjalspfrgszpfprajsoszarkswpbzjbzjoswnraazlswzjpsovsqj22 lskvgqwlfkduwglbuewgwlkfuvueklsuxwteftefvuxqlkkeduxefwuvyujf23 dusybjxdgsimxbdtmhxbxdsgmymhsdumzxphgphgymzjdsshimzhgxmyrmfg24 imurtfzibucnztipnoztziubnrnouimnezwobwobrnefiuuocneobznrlngb25 cnmlpgectmaqepcwqvepecmtqlqvmcnqhexvtxvtlqhgcmmvaqhvteqldqbt K = 11时为结果，明文为： the first deposit consisted of one thousand and fourteen pounds of gold]]></content>
    </entry>

    
  
  
</search>
